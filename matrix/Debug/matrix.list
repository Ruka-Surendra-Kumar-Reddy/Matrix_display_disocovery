
matrix.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031d8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000684  08003360  08003360  00013360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039e4  080039e4  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  080039e4  080039e4  000139e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039ec  080039ec  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039ec  080039ec  000139ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039f0  080039f0  000139f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080039f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000224  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000288  20000288  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b943  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001cac  00000000  00000000  0002ba1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000be0  00000000  00000000  0002d6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000094d  00000000  00000000  0002e2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021a36  00000000  00000000  0002ebf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e24d  00000000  00000000  0005062b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cbd0d  00000000  00000000  0005e878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000034c0  00000000  00000000  0012a588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000082  00000000  00000000  0012da48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000064 	.word	0x20000064
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003348 	.word	0x08003348

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000068 	.word	0x20000068
 80001c4:	08003348 	.word	0x08003348

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <clearScreen>:
int marqueeOffsetY;



void clearScreen(uint8_t bNormal)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]
    if (bNormal) // clear all pixels
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d009      	beq.n	80004e8 <clearScreen+0x24>
        memset(bDMDScreenRAM,0xFF,DMD_RAM_SIZE_BYTES*DisplaysTotal);
 80004d4:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <clearScreen+0x40>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a0b      	ldr	r2, [pc, #44]	; (8000508 <clearScreen+0x44>)
 80004da:	7812      	ldrb	r2, [r2, #0]
 80004dc:	0192      	lsls	r2, r2, #6
 80004de:	21ff      	movs	r1, #255	; 0xff
 80004e0:	4618      	mov	r0, r3
 80004e2:	f002 feed 	bl	80032c0 <memset>
    else // set all pixels
        memset(bDMDScreenRAM,0x00,DMD_RAM_SIZE_BYTES*DisplaysTotal);
}
 80004e6:	e008      	b.n	80004fa <clearScreen+0x36>
        memset(bDMDScreenRAM,0x00,DMD_RAM_SIZE_BYTES*DisplaysTotal);
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <clearScreen+0x40>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a06      	ldr	r2, [pc, #24]	; (8000508 <clearScreen+0x44>)
 80004ee:	7812      	ldrb	r2, [r2, #0]
 80004f0:	0192      	lsls	r2, r2, #6
 80004f2:	2100      	movs	r1, #0
 80004f4:	4618      	mov	r0, r3
 80004f6:	f002 fee3 	bl	80032c0 <memset>
}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000090 	.word	0x20000090
 8000508:	20000080 	.word	0x20000080

0800050c <DMD>:
void DMD(uint8_t panelsWide, uint8_t panelsHigh)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	460a      	mov	r2, r1
 8000516:	71fb      	strb	r3, [r7, #7]
 8000518:	4613      	mov	r3, r2
 800051a:	71bb      	strb	r3, [r7, #6]
//    uint16_t ui;
    DisplaysWide=panelsWide;
 800051c:	4a29      	ldr	r2, [pc, #164]	; (80005c4 <DMD+0xb8>)
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	7013      	strb	r3, [r2, #0]
    DisplaysHigh=panelsHigh;
 8000522:	4a29      	ldr	r2, [pc, #164]	; (80005c8 <DMD+0xbc>)
 8000524:	79bb      	ldrb	r3, [r7, #6]
 8000526:	7013      	strb	r3, [r2, #0]
    DisplaysTotal=DisplaysWide*DisplaysHigh;
 8000528:	4b26      	ldr	r3, [pc, #152]	; (80005c4 <DMD+0xb8>)
 800052a:	781a      	ldrb	r2, [r3, #0]
 800052c:	4b26      	ldr	r3, [pc, #152]	; (80005c8 <DMD+0xbc>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	fb12 f303 	smulbb	r3, r2, r3
 8000534:	b2da      	uxtb	r2, r3
 8000536:	4b25      	ldr	r3, [pc, #148]	; (80005cc <DMD+0xc0>)
 8000538:	701a      	strb	r2, [r3, #0]
    row1 = DisplaysTotal<<4;
 800053a:	4b24      	ldr	r3, [pc, #144]	; (80005cc <DMD+0xc0>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	011b      	lsls	r3, r3, #4
 8000540:	4a23      	ldr	r2, [pc, #140]	; (80005d0 <DMD+0xc4>)
 8000542:	6013      	str	r3, [r2, #0]
    row2 = DisplaysTotal<<5;
 8000544:	4b21      	ldr	r3, [pc, #132]	; (80005cc <DMD+0xc0>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	015b      	lsls	r3, r3, #5
 800054a:	4a22      	ldr	r2, [pc, #136]	; (80005d4 <DMD+0xc8>)
 800054c:	6013      	str	r3, [r2, #0]
    row3 = ((DisplaysTotal<<2)*3)<<2;
 800054e:	4b1f      	ldr	r3, [pc, #124]	; (80005cc <DMD+0xc0>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	009a      	lsls	r2, r3, #2
 8000554:	4613      	mov	r3, r2
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	4413      	add	r3, r2
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	4a1e      	ldr	r2, [pc, #120]	; (80005d8 <DMD+0xcc>)
 800055e:	6013      	str	r3, [r2, #0]
    bDMDScreenRAM = (uint8_t *) malloc(DisplaysTotal*DMD_RAM_SIZE_BYTES);
 8000560:	4b1a      	ldr	r3, [pc, #104]	; (80005cc <DMD+0xc0>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	019b      	lsls	r3, r3, #6
 8000566:	4618      	mov	r0, r3
 8000568:	f002 fdf6 	bl	8003158 <malloc>
 800056c:	4603      	mov	r3, r0
 800056e:	461a      	mov	r2, r3
 8000570:	4b1a      	ldr	r3, [pc, #104]	; (80005dc <DMD+0xd0>)
 8000572:	601a      	str	r2, [r3, #0]


    HAL_GPIO_WritePin(GPIOA, A_PIN_Pin, GPIO_PIN_RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	2104      	movs	r1, #4
 8000578:	4819      	ldr	r0, [pc, #100]	; (80005e0 <DMD+0xd4>)
 800057a:	f001 facf 	bl	8001b1c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, B_Pin_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	2108      	movs	r1, #8
 8000582:	4817      	ldr	r0, [pc, #92]	; (80005e0 <DMD+0xd4>)
 8000584:	f001 faca 	bl	8001b1c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, OE_Pin_Pin, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	2102      	movs	r1, #2
 800058c:	4814      	ldr	r0, [pc, #80]	; (80005e0 <DMD+0xd4>)
 800058e:	f001 fac5 	bl	8001b1c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	2120      	movs	r1, #32
 8000596:	4812      	ldr	r0, [pc, #72]	; (80005e0 <DMD+0xd4>)
 8000598:	f001 fac0 	bl	8001b1c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800059c:	2201      	movs	r2, #1
 800059e:	2180      	movs	r1, #128	; 0x80
 80005a0:	480f      	ldr	r0, [pc, #60]	; (80005e0 <DMD+0xd4>)
 80005a2:	f001 fabb 	bl	8001b1c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, sclk_pin_Pin, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2110      	movs	r1, #16
 80005aa:	480d      	ldr	r0, [pc, #52]	; (80005e0 <DMD+0xd4>)
 80005ac:	f001 fab6 	bl	8001b1c <HAL_GPIO_WritePin>
    clearScreen(true);
 80005b0:	2001      	movs	r0, #1
 80005b2:	f7ff ff87 	bl	80004c4 <clearScreen>

    // init the scan line/ram pointer to the required start point
    bDMDByte = 0;
 80005b6:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <DMD+0xd8>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000082 	.word	0x20000082
 80005c8:	20000083 	.word	0x20000083
 80005cc:	20000080 	.word	0x20000080
 80005d0:	20000084 	.word	0x20000084
 80005d4:	20000088 	.word	0x20000088
 80005d8:	2000008c 	.word	0x2000008c
 80005dc:	20000090 	.word	0x20000090
 80005e0:	40020000 	.word	0x40020000
 80005e4:	20000081 	.word	0x20000081

080005e8 <writePixel>:
void writePixel(unsigned int bX, unsigned int bY, byte bGraphicsMode, byte bPixel)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b089      	sub	sp, #36	; 0x24
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	4611      	mov	r1, r2
 80005f4:	461a      	mov	r2, r3
 80005f6:	460b      	mov	r3, r1
 80005f8:	71fb      	strb	r3, [r7, #7]
 80005fa:	4613      	mov	r3, r2
 80005fc:	71bb      	strb	r3, [r7, #6]
	unsigned int uiDMDRAMPointer;

	    if (bX >= (DMD_PIXELS_ACROSS*DisplaysWide) || bY >= (DMD_PIXELS_DOWN * DisplaysHigh)) {
 80005fe:	4b7f      	ldr	r3, [pc, #508]	; (80007fc <writePixel+0x214>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	015b      	lsls	r3, r3, #5
 8000604:	461a      	mov	r2, r3
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	4293      	cmp	r3, r2
 800060a:	f080 80ea 	bcs.w	80007e2 <writePixel+0x1fa>
 800060e:	4b7c      	ldr	r3, [pc, #496]	; (8000800 <writePixel+0x218>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	011b      	lsls	r3, r3, #4
 8000614:	461a      	mov	r2, r3
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	4293      	cmp	r3, r2
 800061a:	f080 80e2 	bcs.w	80007e2 <writePixel+0x1fa>
		    return;
	    }
	    byte panel=(bX/DMD_PIXELS_ACROSS) + (DisplaysWide*(bY/DMD_PIXELS_DOWN));
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	095b      	lsrs	r3, r3, #5
 8000622:	b2da      	uxtb	r2, r3
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	091b      	lsrs	r3, r3, #4
 8000628:	b2d9      	uxtb	r1, r3
 800062a:	4b74      	ldr	r3, [pc, #464]	; (80007fc <writePixel+0x214>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	fb11 f303 	smulbb	r3, r1, r3
 8000632:	b2db      	uxtb	r3, r3
 8000634:	4413      	add	r3, r2
 8000636:	77fb      	strb	r3, [r7, #31]
	    bX=(bX % DMD_PIXELS_ACROSS) + (panel<<5);
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	f003 031f 	and.w	r3, r3, #31
 800063e:	7ffa      	ldrb	r2, [r7, #31]
 8000640:	0152      	lsls	r2, r2, #5
 8000642:	4413      	add	r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
	    bY=bY % DMD_PIXELS_DOWN;
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	f003 030f 	and.w	r3, r3, #15
 800064c:	60bb      	str	r3, [r7, #8]
	    //set pointer to DMD RAM byte to be modified
	    uiDMDRAMPointer = bX/8 + bY*(DisplaysTotal<<2);
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	08da      	lsrs	r2, r3, #3
 8000652:	4b6c      	ldr	r3, [pc, #432]	; (8000804 <writePixel+0x21c>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	4619      	mov	r1, r3
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	fb01 f303 	mul.w	r3, r1, r3
 8000660:	4413      	add	r3, r2
 8000662:	61bb      	str	r3, [r7, #24]

	    byte lookup = bPixelLookupTable[bX & 0x07];
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f003 0307 	and.w	r3, r3, #7
 800066a:	4a67      	ldr	r2, [pc, #412]	; (8000808 <writePixel+0x220>)
 800066c:	5cd3      	ldrb	r3, [r2, r3]
 800066e:	75fb      	strb	r3, [r7, #23]

	    switch (bGraphicsMode) {
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	2b04      	cmp	r3, #4
 8000674:	f200 80bc 	bhi.w	80007f0 <writePixel+0x208>
 8000678:	a201      	add	r2, pc, #4	; (adr r2, 8000680 <writePixel+0x98>)
 800067a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067e:	bf00      	nop
 8000680:	08000695 	.word	0x08000695
 8000684:	080006dd 	.word	0x080006dd
 8000688:	08000725 	.word	0x08000725
 800068c:	08000781 	.word	0x08000781
 8000690:	080007ad 	.word	0x080007ad
	    case GRAPHICS_NORMAL:
		    if (bPixel == true)
 8000694:	79bb      	ldrb	r3, [r7, #6]
 8000696:	2b01      	cmp	r3, #1
 8000698:	d112      	bne.n	80006c0 <writePixel+0xd8>
			bDMDScreenRAM[uiDMDRAMPointer] &= ~lookup;	// zero bit is pixel on
 800069a:	4b5c      	ldr	r3, [pc, #368]	; (800080c <writePixel+0x224>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	69bb      	ldr	r3, [r7, #24]
 80006a0:	4413      	add	r3, r2
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	b25a      	sxtb	r2, r3
 80006a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80006aa:	43db      	mvns	r3, r3
 80006ac:	b25b      	sxtb	r3, r3
 80006ae:	4013      	ands	r3, r2
 80006b0:	b259      	sxtb	r1, r3
 80006b2:	4b56      	ldr	r3, [pc, #344]	; (800080c <writePixel+0x224>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	69bb      	ldr	r3, [r7, #24]
 80006b8:	4413      	add	r3, r2
 80006ba:	b2ca      	uxtb	r2, r1
 80006bc:	701a      	strb	r2, [r3, #0]
		    else
			bDMDScreenRAM[uiDMDRAMPointer] |= lookup;	// one bit is pixel off
		    break;
 80006be:	e097      	b.n	80007f0 <writePixel+0x208>
			bDMDScreenRAM[uiDMDRAMPointer] |= lookup;	// one bit is pixel off
 80006c0:	4b52      	ldr	r3, [pc, #328]	; (800080c <writePixel+0x224>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	4413      	add	r3, r2
 80006c8:	7819      	ldrb	r1, [r3, #0]
 80006ca:	4b50      	ldr	r3, [pc, #320]	; (800080c <writePixel+0x224>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	69bb      	ldr	r3, [r7, #24]
 80006d0:	4413      	add	r3, r2
 80006d2:	7dfa      	ldrb	r2, [r7, #23]
 80006d4:	430a      	orrs	r2, r1
 80006d6:	b2d2      	uxtb	r2, r2
 80006d8:	701a      	strb	r2, [r3, #0]
		    break;
 80006da:	e089      	b.n	80007f0 <writePixel+0x208>
	    case GRAPHICS_INVERSE:
		    if (bPixel == false)
 80006dc:	79bb      	ldrb	r3, [r7, #6]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d112      	bne.n	8000708 <writePixel+0x120>
			    bDMDScreenRAM[uiDMDRAMPointer] &= ~lookup;	// zero bit is pixel on
 80006e2:	4b4a      	ldr	r3, [pc, #296]	; (800080c <writePixel+0x224>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	69bb      	ldr	r3, [r7, #24]
 80006e8:	4413      	add	r3, r2
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b25a      	sxtb	r2, r3
 80006ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80006f2:	43db      	mvns	r3, r3
 80006f4:	b25b      	sxtb	r3, r3
 80006f6:	4013      	ands	r3, r2
 80006f8:	b259      	sxtb	r1, r3
 80006fa:	4b44      	ldr	r3, [pc, #272]	; (800080c <writePixel+0x224>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	69bb      	ldr	r3, [r7, #24]
 8000700:	4413      	add	r3, r2
 8000702:	b2ca      	uxtb	r2, r1
 8000704:	701a      	strb	r2, [r3, #0]
		    else
			    bDMDScreenRAM[uiDMDRAMPointer] |= lookup;	// one bit is pixel off
		    break;
 8000706:	e073      	b.n	80007f0 <writePixel+0x208>
			    bDMDScreenRAM[uiDMDRAMPointer] |= lookup;	// one bit is pixel off
 8000708:	4b40      	ldr	r3, [pc, #256]	; (800080c <writePixel+0x224>)
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	69bb      	ldr	r3, [r7, #24]
 800070e:	4413      	add	r3, r2
 8000710:	7819      	ldrb	r1, [r3, #0]
 8000712:	4b3e      	ldr	r3, [pc, #248]	; (800080c <writePixel+0x224>)
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	69bb      	ldr	r3, [r7, #24]
 8000718:	4413      	add	r3, r2
 800071a:	7dfa      	ldrb	r2, [r7, #23]
 800071c:	430a      	orrs	r2, r1
 800071e:	b2d2      	uxtb	r2, r2
 8000720:	701a      	strb	r2, [r3, #0]
		    break;
 8000722:	e065      	b.n	80007f0 <writePixel+0x208>
	    case GRAPHICS_TOGGLE:
		    if (bPixel == true) {
 8000724:	79bb      	ldrb	r3, [r7, #6]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d15d      	bne.n	80007e6 <writePixel+0x1fe>
			if ((bDMDScreenRAM[uiDMDRAMPointer] & lookup) == 0)
 800072a:	4b38      	ldr	r3, [pc, #224]	; (800080c <writePixel+0x224>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	69bb      	ldr	r3, [r7, #24]
 8000730:	4413      	add	r3, r2
 8000732:	781a      	ldrb	r2, [r3, #0]
 8000734:	7dfb      	ldrb	r3, [r7, #23]
 8000736:	4013      	ands	r3, r2
 8000738:	b2db      	uxtb	r3, r3
 800073a:	2b00      	cmp	r3, #0
 800073c:	d10d      	bne.n	800075a <writePixel+0x172>
			    bDMDScreenRAM[uiDMDRAMPointer] |= lookup;	// one bit is pixel off
 800073e:	4b33      	ldr	r3, [pc, #204]	; (800080c <writePixel+0x224>)
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	69bb      	ldr	r3, [r7, #24]
 8000744:	4413      	add	r3, r2
 8000746:	7819      	ldrb	r1, [r3, #0]
 8000748:	4b30      	ldr	r3, [pc, #192]	; (800080c <writePixel+0x224>)
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	69bb      	ldr	r3, [r7, #24]
 800074e:	4413      	add	r3, r2
 8000750:	7dfa      	ldrb	r2, [r7, #23]
 8000752:	430a      	orrs	r2, r1
 8000754:	b2d2      	uxtb	r2, r2
 8000756:	701a      	strb	r2, [r3, #0]
			else
			    bDMDScreenRAM[uiDMDRAMPointer] &= ~lookup;	// one bit is pixel off
		    }
		    break;
 8000758:	e045      	b.n	80007e6 <writePixel+0x1fe>
			    bDMDScreenRAM[uiDMDRAMPointer] &= ~lookup;	// one bit is pixel off
 800075a:	4b2c      	ldr	r3, [pc, #176]	; (800080c <writePixel+0x224>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	69bb      	ldr	r3, [r7, #24]
 8000760:	4413      	add	r3, r2
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	b25a      	sxtb	r2, r3
 8000766:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800076a:	43db      	mvns	r3, r3
 800076c:	b25b      	sxtb	r3, r3
 800076e:	4013      	ands	r3, r2
 8000770:	b259      	sxtb	r1, r3
 8000772:	4b26      	ldr	r3, [pc, #152]	; (800080c <writePixel+0x224>)
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	69bb      	ldr	r3, [r7, #24]
 8000778:	4413      	add	r3, r2
 800077a:	b2ca      	uxtb	r2, r1
 800077c:	701a      	strb	r2, [r3, #0]
		    break;
 800077e:	e032      	b.n	80007e6 <writePixel+0x1fe>
	    case GRAPHICS_OR:
		    //only set pixels on
		    if (bPixel == true)
 8000780:	79bb      	ldrb	r3, [r7, #6]
 8000782:	2b01      	cmp	r3, #1
 8000784:	d131      	bne.n	80007ea <writePixel+0x202>
			    bDMDScreenRAM[uiDMDRAMPointer] &= ~lookup;	// zero bit is pixel on
 8000786:	4b21      	ldr	r3, [pc, #132]	; (800080c <writePixel+0x224>)
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	69bb      	ldr	r3, [r7, #24]
 800078c:	4413      	add	r3, r2
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	b25a      	sxtb	r2, r3
 8000792:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000796:	43db      	mvns	r3, r3
 8000798:	b25b      	sxtb	r3, r3
 800079a:	4013      	ands	r3, r2
 800079c:	b259      	sxtb	r1, r3
 800079e:	4b1b      	ldr	r3, [pc, #108]	; (800080c <writePixel+0x224>)
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	69bb      	ldr	r3, [r7, #24]
 80007a4:	4413      	add	r3, r2
 80007a6:	b2ca      	uxtb	r2, r1
 80007a8:	701a      	strb	r2, [r3, #0]
		    break;
 80007aa:	e01e      	b.n	80007ea <writePixel+0x202>
	    case GRAPHICS_NOR:
		    //only clear on pixels
		    if ((bPixel == true) &&
 80007ac:	79bb      	ldrb	r3, [r7, #6]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d11d      	bne.n	80007ee <writePixel+0x206>
			    ((bDMDScreenRAM[uiDMDRAMPointer] & lookup) == 0))
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <writePixel+0x224>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	69bb      	ldr	r3, [r7, #24]
 80007b8:	4413      	add	r3, r2
 80007ba:	781a      	ldrb	r2, [r3, #0]
 80007bc:	7dfb      	ldrb	r3, [r7, #23]
 80007be:	4013      	ands	r3, r2
 80007c0:	b2db      	uxtb	r3, r3
		    if ((bPixel == true) &&
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d113      	bne.n	80007ee <writePixel+0x206>
			    bDMDScreenRAM[uiDMDRAMPointer] |= lookup;	// one bit is pixel off
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <writePixel+0x224>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	69bb      	ldr	r3, [r7, #24]
 80007cc:	4413      	add	r3, r2
 80007ce:	7819      	ldrb	r1, [r3, #0]
 80007d0:	4b0e      	ldr	r3, [pc, #56]	; (800080c <writePixel+0x224>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	4413      	add	r3, r2
 80007d8:	7dfa      	ldrb	r2, [r7, #23]
 80007da:	430a      	orrs	r2, r1
 80007dc:	b2d2      	uxtb	r2, r2
 80007de:	701a      	strb	r2, [r3, #0]
		    break;
 80007e0:	e005      	b.n	80007ee <writePixel+0x206>
		    return;
 80007e2:	bf00      	nop
 80007e4:	e004      	b.n	80007f0 <writePixel+0x208>
		    break;
 80007e6:	bf00      	nop
 80007e8:	e002      	b.n	80007f0 <writePixel+0x208>
		    break;
 80007ea:	bf00      	nop
 80007ec:	e000      	b.n	80007f0 <writePixel+0x208>
		    break;
 80007ee:	bf00      	nop
	    }

}
 80007f0:	3724      	adds	r7, #36	; 0x24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	20000082 	.word	0x20000082
 8000800:	20000083 	.word	0x20000083
 8000804:	20000080 	.word	0x20000080
 8000808:	20000000 	.word	0x20000000
 800080c:	20000090 	.word	0x20000090

08000810 <drawLine>:
void drawLine(int x1, int y1, int x2, int y2, byte bGraphicsMode)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
 800081c:	603b      	str	r3, [r7, #0]
    int dy = y2 - y1;
 800081e:	683a      	ldr	r2, [r7, #0]
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	1ad3      	subs	r3, r2, r3
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
    int dx = x2 - x1;
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	1ad3      	subs	r3, r2, r3
 800082c:	623b      	str	r3, [r7, #32]
    int stepx, stepy;

    if (dy < 0) {
 800082e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000830:	2b00      	cmp	r3, #0
 8000832:	da06      	bge.n	8000842 <drawLine+0x32>
	    dy = -dy;
 8000834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000836:	425b      	negs	r3, r3
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
	    stepy = -1;
 800083a:	f04f 33ff 	mov.w	r3, #4294967295
 800083e:	61bb      	str	r3, [r7, #24]
 8000840:	e001      	b.n	8000846 <drawLine+0x36>
    } else {
	    stepy = 1;
 8000842:	2301      	movs	r3, #1
 8000844:	61bb      	str	r3, [r7, #24]
    }
    if (dx < 0) {
 8000846:	6a3b      	ldr	r3, [r7, #32]
 8000848:	2b00      	cmp	r3, #0
 800084a:	da06      	bge.n	800085a <drawLine+0x4a>
	    dx = -dx;
 800084c:	6a3b      	ldr	r3, [r7, #32]
 800084e:	425b      	negs	r3, r3
 8000850:	623b      	str	r3, [r7, #32]
	    stepx = -1;
 8000852:	f04f 33ff 	mov.w	r3, #4294967295
 8000856:	61fb      	str	r3, [r7, #28]
 8000858:	e001      	b.n	800085e <drawLine+0x4e>
    } else {
	    stepx = 1;
 800085a:	2301      	movs	r3, #1
 800085c:	61fb      	str	r3, [r7, #28]
    }
    dy <<= 1;			// dy is now 2*dy
 800085e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
    dx <<= 1;			// dx is now 2*dx
 8000864:	6a3b      	ldr	r3, [r7, #32]
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	623b      	str	r3, [r7, #32]

    writePixel(x1, y1, bGraphicsMode, true);
 800086a:	68f8      	ldr	r0, [r7, #12]
 800086c:	68b9      	ldr	r1, [r7, #8]
 800086e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000872:	2301      	movs	r3, #1
 8000874:	f7ff feb8 	bl	80005e8 <writePixel>
    if (dx > dy) {
 8000878:	6a3a      	ldr	r2, [r7, #32]
 800087a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087c:	429a      	cmp	r2, r3
 800087e:	dd24      	ble.n	80008ca <drawLine+0xba>
	    int fraction = dy - (dx >> 1);	// same as 2*dy - dx
 8000880:	6a3b      	ldr	r3, [r7, #32]
 8000882:	105b      	asrs	r3, r3, #1
 8000884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000886:	1ad3      	subs	r3, r2, r3
 8000888:	617b      	str	r3, [r7, #20]
	    while (x1 != x2) {
 800088a:	e019      	b.n	80008c0 <drawLine+0xb0>
	        if (fraction >= 0) {
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	2b00      	cmp	r3, #0
 8000890:	db07      	blt.n	80008a2 <drawLine+0x92>
		        y1 += stepy;
 8000892:	68ba      	ldr	r2, [r7, #8]
 8000894:	69bb      	ldr	r3, [r7, #24]
 8000896:	4413      	add	r3, r2
 8000898:	60bb      	str	r3, [r7, #8]
		        fraction -= dx;	// same as fraction -= 2*dx
 800089a:	697a      	ldr	r2, [r7, #20]
 800089c:	6a3b      	ldr	r3, [r7, #32]
 800089e:	1ad3      	subs	r3, r2, r3
 80008a0:	617b      	str	r3, [r7, #20]
	        }
	        x1 += stepx;
 80008a2:	68fa      	ldr	r2, [r7, #12]
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	4413      	add	r3, r2
 80008a8:	60fb      	str	r3, [r7, #12]
	        fraction += dy;	// same as fraction -= 2*dy
 80008aa:	697a      	ldr	r2, [r7, #20]
 80008ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ae:	4413      	add	r3, r2
 80008b0:	617b      	str	r3, [r7, #20]
	        writePixel(x1, y1, bGraphicsMode, true);
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	68b9      	ldr	r1, [r7, #8]
 80008b6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80008ba:	2301      	movs	r3, #1
 80008bc:	f7ff fe94 	bl	80005e8 <writePixel>
	    while (x1 != x2) {
 80008c0:	68fa      	ldr	r2, [r7, #12]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d1e1      	bne.n	800088c <drawLine+0x7c>
	        y1 += stepy;
	        fraction += dx;
	        writePixel(x1, y1, bGraphicsMode, true);
	    }
    }
}
 80008c8:	e023      	b.n	8000912 <drawLine+0x102>
	    int fraction = dx - (dy >> 1);
 80008ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008cc:	105b      	asrs	r3, r3, #1
 80008ce:	6a3a      	ldr	r2, [r7, #32]
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	613b      	str	r3, [r7, #16]
	    while (y1 != y2) {
 80008d4:	e019      	b.n	800090a <drawLine+0xfa>
	        if (fraction >= 0) {
 80008d6:	693b      	ldr	r3, [r7, #16]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	db07      	blt.n	80008ec <drawLine+0xdc>
		        x1 += stepx;
 80008dc:	68fa      	ldr	r2, [r7, #12]
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	4413      	add	r3, r2
 80008e2:	60fb      	str	r3, [r7, #12]
		        fraction -= dy;
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	613b      	str	r3, [r7, #16]
	        y1 += stepy;
 80008ec:	68ba      	ldr	r2, [r7, #8]
 80008ee:	69bb      	ldr	r3, [r7, #24]
 80008f0:	4413      	add	r3, r2
 80008f2:	60bb      	str	r3, [r7, #8]
	        fraction += dx;
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	6a3b      	ldr	r3, [r7, #32]
 80008f8:	4413      	add	r3, r2
 80008fa:	613b      	str	r3, [r7, #16]
	        writePixel(x1, y1, bGraphicsMode, true);
 80008fc:	68f8      	ldr	r0, [r7, #12]
 80008fe:	68b9      	ldr	r1, [r7, #8]
 8000900:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000904:	2301      	movs	r3, #1
 8000906:	f7ff fe6f 	bl	80005e8 <writePixel>
	    while (y1 != y2) {
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	429a      	cmp	r2, r3
 8000910:	d1e1      	bne.n	80008d6 <drawLine+0xc6>
}
 8000912:	bf00      	nop
 8000914:	3728      	adds	r7, #40	; 0x28
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <selectFont>:
void selectFont(const uint8_t * font)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
    Font = font;
 8000924:	4a04      	ldr	r2, [pc, #16]	; (8000938 <selectFont+0x1c>)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6013      	str	r3, [r2, #0]
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	20000094 	.word	0x20000094

0800093c <drawFilledBox>:

void drawFilledBox(int x1, int y1, int x2, int y2,byte bGraphicsMode)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af02      	add	r7, sp, #8
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
 8000948:	603b      	str	r3, [r7, #0]
for (int b = x1; b <= x2; b++) {
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	617b      	str	r3, [r7, #20]
 800094e:	e00b      	b.n	8000968 <drawFilledBox+0x2c>
    drawLine(b, y1, b, y2, bGraphicsMode);
 8000950:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	697a      	ldr	r2, [r7, #20]
 800095a:	68b9      	ldr	r1, [r7, #8]
 800095c:	6978      	ldr	r0, [r7, #20]
 800095e:	f7ff ff57 	bl	8000810 <drawLine>
for (int b = x1; b <= x2; b++) {
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	3301      	adds	r3, #1
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	697a      	ldr	r2, [r7, #20]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	429a      	cmp	r2, r3
 800096e:	ddef      	ble.n	8000950 <drawFilledBox+0x14>
}
}
 8000970:	bf00      	nop
 8000972:	bf00      	nop
 8000974:	3718      	adds	r7, #24
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <charWidth>:
    drawLine(x2, y2, x1, y2, bGraphicsMode);
    drawLine(x1, y2, x1, y1, bGraphicsMode);
}

int charWidth(const unsigned char letter)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
    unsigned char c = letter;
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	73fb      	strb	r3, [r7, #15]
    // Space is often not included in font so use width of 'n'
    if (c == ' ') c = 'n';
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	2b20      	cmp	r3, #32
 800098e:	d101      	bne.n	8000994 <charWidth+0x18>
 8000990:	236e      	movs	r3, #110	; 0x6e
 8000992:	73fb      	strb	r3, [r7, #15]
    uint8_t width = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	73bb      	strb	r3, [r7, #14]

    uint8_t firstChar = (*(Font + FONT_FIRST_CHAR));
 8000998:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <charWidth+0x94>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	3304      	adds	r3, #4
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	737b      	strb	r3, [r7, #13]
    uint8_t charCount = (*(Font+ FONT_CHAR_COUNT));
 80009a2:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <charWidth+0x94>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	3305      	adds	r3, #5
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	733b      	strb	r3, [r7, #12]

    uint16_t index = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	817b      	strh	r3, [r7, #10]

    if (c < firstChar || c >= (firstChar + charCount)) {
 80009b0:	7bfa      	ldrb	r2, [r7, #15]
 80009b2:	7b7b      	ldrb	r3, [r7, #13]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d305      	bcc.n	80009c4 <charWidth+0x48>
 80009b8:	7bfa      	ldrb	r2, [r7, #15]
 80009ba:	7b79      	ldrb	r1, [r7, #13]
 80009bc:	7b3b      	ldrb	r3, [r7, #12]
 80009be:	440b      	add	r3, r1
 80009c0:	429a      	cmp	r2, r3
 80009c2:	db01      	blt.n	80009c8 <charWidth+0x4c>
	    return 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	e01c      	b.n	8000a02 <charWidth+0x86>
    }
    c -= firstChar;
 80009c8:	7bfa      	ldrb	r2, [r7, #15]
 80009ca:	7b7b      	ldrb	r3, [r7, #13]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	73fb      	strb	r3, [r7, #15]

    if (*( Font + FONT_LENGTH) == 0
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <charWidth+0x94>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d10b      	bne.n	80009f2 <charWidth+0x76>
	&& *(Font + FONT_LENGTH + 1) == 0) {
 80009da:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <charWidth+0x94>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	3301      	adds	r3, #1
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d105      	bne.n	80009f2 <charWidth+0x76>
	    // zero length is flag indicating fixed width font (array does not contain width data entries)
	    width = *((Font) + FONT_FIXED_WIDTH);
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <charWidth+0x94>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	3302      	adds	r3, #2
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	73bb      	strb	r3, [r7, #14]
 80009f0:	e006      	b.n	8000a00 <charWidth+0x84>
    } else {
	    // variable width font, read width data
	    width = *((Font) + FONT_WIDTH_TABLE + c);
 80009f2:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <charWidth+0x94>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	3306      	adds	r3, #6
 80009fa:	4413      	add	r3, r2
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	73bb      	strb	r3, [r7, #14]
    }

    return width;
 8000a00:	7bbb      	ldrb	r3, [r7, #14]
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000094 	.word	0x20000094

08000a14 <drawChar>:
int drawChar(const int bX, const int bY, const unsigned char letter, byte bGraphicsMode)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08c      	sub	sp, #48	; 0x30
 8000a18:	af02      	add	r7, sp, #8
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	4611      	mov	r1, r2
 8000a20:	461a      	mov	r2, r3
 8000a22:	460b      	mov	r3, r1
 8000a24:	71fb      	strb	r3, [r7, #7]
 8000a26:	4613      	mov	r3, r2
 8000a28:	71bb      	strb	r3, [r7, #6]
    if (bX > (DMD_PIXELS_ACROSS*DisplaysWide) || bY > (DMD_PIXELS_DOWN*DisplaysHigh) )
 8000a2a:	4b97      	ldr	r3, [pc, #604]	; (8000c88 <drawChar+0x274>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	015b      	lsls	r3, r3, #5
 8000a30:	68fa      	ldr	r2, [r7, #12]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	dc05      	bgt.n	8000a42 <drawChar+0x2e>
 8000a36:	4b95      	ldr	r3, [pc, #596]	; (8000c8c <drawChar+0x278>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	011b      	lsls	r3, r3, #4
 8000a3c:	68ba      	ldr	r2, [r7, #8]
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	dd02      	ble.n	8000a48 <drawChar+0x34>
    {
    	return -1;
 8000a42:	f04f 33ff 	mov.w	r3, #4294967295
 8000a46:	e11b      	b.n	8000c80 <drawChar+0x26c>
    }

    unsigned char c = letter;
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	76bb      	strb	r3, [r7, #26]
    uint8_t height =(*(Font + FONT_HEIGHT));
 8000a4c:	4b90      	ldr	r3, [pc, #576]	; (8000c90 <drawChar+0x27c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	3303      	adds	r3, #3
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	767b      	strb	r3, [r7, #25]
    if (c == ' ') {
 8000a56:	7ebb      	ldrb	r3, [r7, #26]
 8000a58:	2b20      	cmp	r3, #32
 8000a5a:	d112      	bne.n	8000a82 <drawChar+0x6e>
	    int charWide = charWidth(' ');
 8000a5c:	2020      	movs	r0, #32
 8000a5e:	f7ff ff8d 	bl	800097c <charWidth>
 8000a62:	6138      	str	r0, [r7, #16]
	   drawFilledBox(bX, bY, bX + charWide, bY + height, GRAPHICS_INVERSE);
 8000a64:	68fa      	ldr	r2, [r7, #12]
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	18d1      	adds	r1, r2, r3
 8000a6a:	7e7a      	ldrb	r2, [r7, #25]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	4413      	add	r3, r2
 8000a70:	2201      	movs	r2, #1
 8000a72:	9200      	str	r2, [sp, #0]
 8000a74:	460a      	mov	r2, r1
 8000a76:	68b9      	ldr	r1, [r7, #8]
 8000a78:	68f8      	ldr	r0, [r7, #12]
 8000a7a:	f7ff ff5f 	bl	800093c <drawFilledBox>
	    return charWide;
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	e0fe      	b.n	8000c80 <drawChar+0x26c>
    }
    uint8_t width = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t bytes = (height + 7) / 8;
 8000a88:	7e7b      	ldrb	r3, [r7, #25]
 8000a8a:	3307      	adds	r3, #7
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	da00      	bge.n	8000a92 <drawChar+0x7e>
 8000a90:	3307      	adds	r3, #7
 8000a92:	10db      	asrs	r3, r3, #3
 8000a94:	763b      	strb	r3, [r7, #24]

    uint8_t firstChar = (*(Font + FONT_FIRST_CHAR));
 8000a96:	4b7e      	ldr	r3, [pc, #504]	; (8000c90 <drawChar+0x27c>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	3304      	adds	r3, #4
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	75fb      	strb	r3, [r7, #23]
    uint8_t charCount = (*(Font + FONT_CHAR_COUNT));
 8000aa0:	4b7b      	ldr	r3, [pc, #492]	; (8000c90 <drawChar+0x27c>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	3305      	adds	r3, #5
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	75bb      	strb	r3, [r7, #22]

    uint16_t index = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	84bb      	strh	r3, [r7, #36]	; 0x24

    if (c < firstChar || c >= (firstChar + charCount)) return 0;
 8000aae:	7eba      	ldrb	r2, [r7, #26]
 8000ab0:	7dfb      	ldrb	r3, [r7, #23]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d305      	bcc.n	8000ac2 <drawChar+0xae>
 8000ab6:	7eba      	ldrb	r2, [r7, #26]
 8000ab8:	7df9      	ldrb	r1, [r7, #23]
 8000aba:	7dbb      	ldrb	r3, [r7, #22]
 8000abc:	440b      	add	r3, r1
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	db01      	blt.n	8000ac6 <drawChar+0xb2>
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	e0dc      	b.n	8000c80 <drawChar+0x26c>
    c -= firstChar;
 8000ac6:	7eba      	ldrb	r2, [r7, #26]
 8000ac8:	7dfb      	ldrb	r3, [r7, #23]
 8000aca:	1ad3      	subs	r3, r2, r3
 8000acc:	76bb      	strb	r3, [r7, #26]

    if ( *(Font + FONT_LENGTH) == 0
 8000ace:	4b70      	ldr	r3, [pc, #448]	; (8000c90 <drawChar+0x27c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d11b      	bne.n	8000b10 <drawChar+0xfc>
	    && *(Font + FONT_LENGTH + 1) == 0) {
 8000ad8:	4b6d      	ldr	r3, [pc, #436]	; (8000c90 <drawChar+0x27c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	3301      	adds	r3, #1
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d115      	bne.n	8000b10 <drawChar+0xfc>
	    // zero length is flag indicating fixed width font (array does not contain width data entries)
	    width = (*(Font + FONT_FIXED_WIDTH));
 8000ae4:	4b6a      	ldr	r3, [pc, #424]	; (8000c90 <drawChar+0x27c>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	3302      	adds	r3, #2
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	    index = c * bytes * width + FONT_WIDTH_TABLE;
 8000af0:	7ebb      	ldrb	r3, [r7, #26]
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	7e3b      	ldrb	r3, [r7, #24]
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	fb12 f303 	smulbb	r3, r2, r3
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	fb12 f303 	smulbb	r3, r2, r3
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	3306      	adds	r3, #6
 8000b0c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000b0e:	e02c      	b.n	8000b6a <drawChar+0x156>
    } else {
	    // variable width font, read width data, to get the index
	    for (uint8_t i = 0; i < c; i++) {
 8000b10:	2300      	movs	r3, #0
 8000b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000b16:	e00f      	b.n	8000b38 <drawChar+0x124>
	        index += *(Font + FONT_WIDTH_TABLE + i);
 8000b18:	4b5d      	ldr	r3, [pc, #372]	; (8000c90 <drawChar+0x27c>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b20:	3306      	adds	r3, #6
 8000b22:	4413      	add	r3, r2
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b2a:	4413      	add	r3, r2
 8000b2c:	84bb      	strh	r3, [r7, #36]	; 0x24
	    for (uint8_t i = 0; i < c; i++) {
 8000b2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b32:	3301      	adds	r3, #1
 8000b34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000b38:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000b3c:	7ebb      	ldrb	r3, [r7, #26]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d3ea      	bcc.n	8000b18 <drawChar+0x104>
	    }
	    index = index * bytes + charCount + FONT_WIDTH_TABLE;
 8000b42:	7e3b      	ldrb	r3, [r7, #24]
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000b48:	fb12 f303 	smulbb	r3, r2, r3
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	7dbb      	ldrb	r3, [r7, #22]
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	4413      	add	r3, r2
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	3306      	adds	r3, #6
 8000b58:	84bb      	strh	r3, [r7, #36]	; 0x24
	    width = *( Font + FONT_WIDTH_TABLE + c);
 8000b5a:	4b4d      	ldr	r3, [pc, #308]	; (8000c90 <drawChar+0x27c>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	7ebb      	ldrb	r3, [r7, #26]
 8000b60:	3306      	adds	r3, #6
 8000b62:	4413      	add	r3, r2
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    if (bX < -width || bY < -height) return width;
 8000b6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b6e:	425b      	negs	r3, r3
 8000b70:	68fa      	ldr	r2, [r7, #12]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	db04      	blt.n	8000b80 <drawChar+0x16c>
 8000b76:	7e7b      	ldrb	r3, [r7, #25]
 8000b78:	425b      	negs	r3, r3
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	da02      	bge.n	8000b86 <drawChar+0x172>
 8000b80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b84:	e07c      	b.n	8000c80 <drawChar+0x26c>

    // last but not least, draw the character
    for (uint8_t j = 0; j < width; j++) { // Width
 8000b86:	2300      	movs	r3, #0
 8000b88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000b8c:	e070      	b.n	8000c70 <drawChar+0x25c>
	    for (uint8_t i = bytes - 1; i < 254; i--) { // Vertical Bytes
 8000b8e:	7e3b      	ldrb	r3, [r7, #24]
 8000b90:	3b01      	subs	r3, #1
 8000b92:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000b96:	e062      	b.n	8000c5e <drawChar+0x24a>
	        uint8_t data = *((Font) + index + j + (i * width));
 8000b98:	4b3d      	ldr	r3, [pc, #244]	; (8000c90 <drawChar+0x27c>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8000b9e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000ba2:	440b      	add	r3, r1
 8000ba4:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8000ba8:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 8000bac:	fb00 f101 	mul.w	r1, r0, r1
 8000bb0:	440b      	add	r3, r1
 8000bb2:	4413      	add	r3, r2
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	757b      	strb	r3, [r7, #21]
		    int offset = (i * 8);
 8000bb8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	61fb      	str	r3, [r7, #28]
		    if ((i == bytes - 1) && bytes > 1) {
 8000bc0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000bc4:	7e3b      	ldrb	r3, [r7, #24]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d105      	bne.n	8000bd8 <drawChar+0x1c4>
 8000bcc:	7e3b      	ldrb	r3, [r7, #24]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d902      	bls.n	8000bd8 <drawChar+0x1c4>
		        offset = height - 8;
 8000bd2:	7e7b      	ldrb	r3, [r7, #25]
 8000bd4:	3b08      	subs	r3, #8
 8000bd6:	61fb      	str	r3, [r7, #28]
            }
	        for (uint8_t k = 0; k < 8; k++) { // Vertical bits
 8000bd8:	2300      	movs	r3, #0
 8000bda:	76fb      	strb	r3, [r7, #27]
 8000bdc:	e037      	b.n	8000c4e <drawChar+0x23a>
		        if ((offset+k >= i*8) && (offset+k <= height)) {
 8000bde:	7efa      	ldrb	r2, [r7, #27]
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	441a      	add	r2, r3
 8000be4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	429a      	cmp	r2, r3
 8000bec:	db2c      	blt.n	8000c48 <drawChar+0x234>
 8000bee:	7efa      	ldrb	r2, [r7, #27]
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	441a      	add	r2, r3
 8000bf4:	7e7b      	ldrb	r3, [r7, #25]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	dc26      	bgt.n	8000c48 <drawChar+0x234>
		            if (data & (1 << k)) {
 8000bfa:	7d7a      	ldrb	r2, [r7, #21]
 8000bfc:	7efb      	ldrb	r3, [r7, #27]
 8000bfe:	fa42 f303 	asr.w	r3, r2, r3
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d00f      	beq.n	8000c2a <drawChar+0x216>
			            writePixel(bX + j, bY + offset + k, bGraphicsMode, true);
 8000c0a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	4413      	add	r3, r2
 8000c12:	4618      	mov	r0, r3
 8000c14:	68ba      	ldr	r2, [r7, #8]
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	441a      	add	r2, r3
 8000c1a:	7efb      	ldrb	r3, [r7, #27]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	4619      	mov	r1, r3
 8000c20:	79ba      	ldrb	r2, [r7, #6]
 8000c22:	2301      	movs	r3, #1
 8000c24:	f7ff fce0 	bl	80005e8 <writePixel>
 8000c28:	e00e      	b.n	8000c48 <drawChar+0x234>
		            } else {
			            writePixel(bX + j, bY + offset + k, bGraphicsMode, false);
 8000c2a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	4413      	add	r3, r2
 8000c32:	4618      	mov	r0, r3
 8000c34:	68ba      	ldr	r2, [r7, #8]
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	441a      	add	r2, r3
 8000c3a:	7efb      	ldrb	r3, [r7, #27]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	4619      	mov	r1, r3
 8000c40:	79ba      	ldrb	r2, [r7, #6]
 8000c42:	2300      	movs	r3, #0
 8000c44:	f7ff fcd0 	bl	80005e8 <writePixel>
	        for (uint8_t k = 0; k < 8; k++) { // Vertical bits
 8000c48:	7efb      	ldrb	r3, [r7, #27]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	76fb      	strb	r3, [r7, #27]
 8000c4e:	7efb      	ldrb	r3, [r7, #27]
 8000c50:	2b07      	cmp	r3, #7
 8000c52:	d9c4      	bls.n	8000bde <drawChar+0x1ca>
	    for (uint8_t i = bytes - 1; i < 254; i--) { // Vertical Bytes
 8000c54:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000c5e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000c62:	2bfd      	cmp	r3, #253	; 0xfd
 8000c64:	d998      	bls.n	8000b98 <drawChar+0x184>
    for (uint8_t j = 0; j < width; j++) { // Width
 8000c66:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000c70:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000c74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d388      	bcc.n	8000b8e <drawChar+0x17a>
		            }
		        }
	        }
	    }
    }
    return width;
 8000c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3728      	adds	r7, #40	; 0x28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000082 	.word	0x20000082
 8000c8c:	20000083 	.word	0x20000083
 8000c90:	20000094 	.word	0x20000094

08000c94 <drawString>:
void drawString(int bX, int bY, const char *bChars, byte length, byte bGraphicsMode)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08a      	sub	sp, #40	; 0x28
 8000c98:	af02      	add	r7, sp, #8
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
 8000ca0:	70fb      	strb	r3, [r7, #3]
    if (bX >= (DMD_PIXELS_ACROSS*DisplaysWide) || bY >= DMD_PIXELS_DOWN * DisplaysHigh)
 8000ca2:	4b39      	ldr	r3, [pc, #228]	; (8000d88 <drawString+0xf4>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	015b      	lsls	r3, r3, #5
 8000ca8:	68fa      	ldr	r2, [r7, #12]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	da61      	bge.n	8000d72 <drawString+0xde>
 8000cae:	4b37      	ldr	r3, [pc, #220]	; (8000d8c <drawString+0xf8>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	011b      	lsls	r3, r3, #4
 8000cb4:	68ba      	ldr	r2, [r7, #8]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	da5b      	bge.n	8000d72 <drawString+0xde>
	return;
    uint8_t height = *((Font) + FONT_HEIGHT);
 8000cba:	4b35      	ldr	r3, [pc, #212]	; (8000d90 <drawString+0xfc>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	3303      	adds	r3, #3
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	75fb      	strb	r3, [r7, #23]
    if (bY+height<0) return;
 8000cc4:	7dfa      	ldrb	r2, [r7, #23]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	4413      	add	r3, r2
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db53      	blt.n	8000d76 <drawString+0xe2>

    int strWidth = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
	drawLine(bX -1 , bY, bX -1 , bY + height, GRAPHICS_INVERSE);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	1e58      	subs	r0, r3, #1
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	1e59      	subs	r1, r3, #1
 8000cda:	7dfa      	ldrb	r2, [r7, #23]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	4413      	add	r3, r2
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	9200      	str	r2, [sp, #0]
 8000ce4:	460a      	mov	r2, r1
 8000ce6:	68b9      	ldr	r1, [r7, #8]
 8000ce8:	f7ff fd92 	bl	8000810 <drawLine>

    for (int i = 0; i < length; i++) {
 8000cec:	2300      	movs	r3, #0
 8000cee:	61bb      	str	r3, [r7, #24]
 8000cf0:	e03a      	b.n	8000d68 <drawString+0xd4>
        int charWide = drawChar(bX+strWidth, bY, bChars[i], bGraphicsMode);
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	18d0      	adds	r0, r2, r3
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	781a      	ldrb	r2, [r3, #0]
 8000d00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d04:	68b9      	ldr	r1, [r7, #8]
 8000d06:	f7ff fe85 	bl	8000a14 <drawChar>
 8000d0a:	6138      	str	r0, [r7, #16]
	    if (charWide > 0) {
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	dd16      	ble.n	8000d40 <drawString+0xac>
	        strWidth += charWide ;
 8000d12:	69fa      	ldr	r2, [r7, #28]
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	4413      	add	r3, r2
 8000d18:	61fb      	str	r3, [r7, #28]
	       drawLine(bX + strWidth , bY, bX + strWidth , bY + height, GRAPHICS_INVERSE);
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	18d0      	adds	r0, r2, r3
 8000d20:	68fa      	ldr	r2, [r7, #12]
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	18d1      	adds	r1, r2, r3
 8000d26:	7dfa      	ldrb	r2, [r7, #23]
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	9200      	str	r2, [sp, #0]
 8000d30:	460a      	mov	r2, r1
 8000d32:	68b9      	ldr	r1, [r7, #8]
 8000d34:	f7ff fd6c 	bl	8000810 <drawLine>
            strWidth++;
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	61fb      	str	r3, [r7, #28]
 8000d3e:	e002      	b.n	8000d46 <drawString+0xb2>
        } else if (charWide < 0) {
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	db19      	blt.n	8000d7a <drawString+0xe6>
            return;
        }
        if ((bX + strWidth) >= DMD_PIXELS_ACROSS * DisplaysWide || bY >= DMD_PIXELS_DOWN * DisplaysHigh) return;
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	441a      	add	r2, r3
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <drawString+0xf4>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	015b      	lsls	r3, r3, #5
 8000d52:	429a      	cmp	r2, r3
 8000d54:	da13      	bge.n	8000d7e <drawString+0xea>
 8000d56:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <drawString+0xf8>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	011b      	lsls	r3, r3, #4
 8000d5c:	68ba      	ldr	r2, [r7, #8]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	da0d      	bge.n	8000d7e <drawString+0xea>
    for (int i = 0; i < length; i++) {
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	3301      	adds	r3, #1
 8000d66:	61bb      	str	r3, [r7, #24]
 8000d68:	78fb      	ldrb	r3, [r7, #3]
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	dbc0      	blt.n	8000cf2 <drawString+0x5e>
 8000d70:	e006      	b.n	8000d80 <drawString+0xec>
	return;
 8000d72:	bf00      	nop
 8000d74:	e004      	b.n	8000d80 <drawString+0xec>
    if (bY+height<0) return;
 8000d76:	bf00      	nop
 8000d78:	e002      	b.n	8000d80 <drawString+0xec>
            return;
 8000d7a:	bf00      	nop
 8000d7c:	e000      	b.n	8000d80 <drawString+0xec>
        if ((bX + strWidth) >= DMD_PIXELS_ACROSS * DisplaysWide || bY >= DMD_PIXELS_DOWN * DisplaysHigh) return;
 8000d7e:	bf00      	nop
    }
}
 8000d80:	3720      	adds	r7, #32
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000082 	.word	0x20000082
 8000d8c:	20000083 	.word	0x20000083
 8000d90:	20000094 	.word	0x20000094

08000d94 <scanDisplayBySPI>:
void scanDisplayBySPI()
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0

    //if PIN_OTHER_SPI_nCS is in use during a DMD scan request then scanDisplayBySPI() will exit without conflict! (and skip that scan)
     if( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET )
 8000d9a:	2140      	movs	r1, #64	; 0x40
 8000d9c:	4860      	ldr	r0, [pc, #384]	; (8000f20 <scanDisplayBySPI+0x18c>)
 8000d9e:	f000 fea5 	bl	8001aec <HAL_GPIO_ReadPin>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	f040 80b6 	bne.w	8000f16 <scanDisplayBySPI+0x182>
    {
        //SPI transfer pixels to the display hardware shift registers
        int rowsize=DisplaysTotal<<2;
 8000daa:	4b5e      	ldr	r3, [pc, #376]	; (8000f24 <scanDisplayBySPI+0x190>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	60bb      	str	r3, [r7, #8]
      uint8_t offset=rowsize * bDMDByte;
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4b5c      	ldr	r3, [pc, #368]	; (8000f28 <scanDisplayBySPI+0x194>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	fb12 f303 	smulbb	r3, r2, r3
 8000dbe:	71fb      	strb	r3, [r7, #7]
        for (int i=0;i<rowsize;i++) {
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	e047      	b.n	8000e56 <scanDisplayBySPI+0xc2>
        	uint8_t data = bDMDScreenRAM[offset+i+row3];
 8000dc6:	4b59      	ldr	r3, [pc, #356]	; (8000f2c <scanDisplayBySPI+0x198>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	79f9      	ldrb	r1, [r7, #7]
 8000dcc:	68fa      	ldr	r2, [r7, #12]
 8000dce:	4411      	add	r1, r2
 8000dd0:	4a57      	ldr	r2, [pc, #348]	; (8000f30 <scanDisplayBySPI+0x19c>)
 8000dd2:	6812      	ldr	r2, [r2, #0]
 8000dd4:	440a      	add	r2, r1
 8000dd6:	4413      	add	r3, r2
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	71bb      	strb	r3, [r7, #6]
           	uint8_t data1 = bDMDScreenRAM[offset+i+row2];
 8000ddc:	4b53      	ldr	r3, [pc, #332]	; (8000f2c <scanDisplayBySPI+0x198>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	79f9      	ldrb	r1, [r7, #7]
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	4411      	add	r1, r2
 8000de6:	4a53      	ldr	r2, [pc, #332]	; (8000f34 <scanDisplayBySPI+0x1a0>)
 8000de8:	6812      	ldr	r2, [r2, #0]
 8000dea:	440a      	add	r2, r1
 8000dec:	4413      	add	r3, r2
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	717b      	strb	r3, [r7, #5]
           	uint8_t data2 = bDMDScreenRAM[offset+i+row1];
 8000df2:	4b4e      	ldr	r3, [pc, #312]	; (8000f2c <scanDisplayBySPI+0x198>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	79f9      	ldrb	r1, [r7, #7]
 8000df8:	68fa      	ldr	r2, [r7, #12]
 8000dfa:	4411      	add	r1, r2
 8000dfc:	4a4e      	ldr	r2, [pc, #312]	; (8000f38 <scanDisplayBySPI+0x1a4>)
 8000dfe:	6812      	ldr	r2, [r2, #0]
 8000e00:	440a      	add	r2, r1
 8000e02:	4413      	add	r3, r2
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	713b      	strb	r3, [r7, #4]
           	uint8_t data3 = bDMDScreenRAM[offset+i];
 8000e08:	4b48      	ldr	r3, [pc, #288]	; (8000f2c <scanDisplayBySPI+0x198>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	79f9      	ldrb	r1, [r7, #7]
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	440a      	add	r2, r1
 8000e12:	4413      	add	r3, r2
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	70fb      	strb	r3, [r7, #3]
        	HAL_SPI_Transmit(&hspi1, &data, sizeof(data), HAL_MAX_DELAY);
 8000e18:	1db9      	adds	r1, r7, #6
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1e:	2201      	movs	r2, #1
 8000e20:	4846      	ldr	r0, [pc, #280]	; (8000f3c <scanDisplayBySPI+0x1a8>)
 8000e22:	f001 fb82 	bl	800252a <HAL_SPI_Transmit>
        	HAL_SPI_Transmit(&hspi1, &data1, sizeof(data1), HAL_MAX_DELAY);
 8000e26:	1d79      	adds	r1, r7, #5
 8000e28:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	4843      	ldr	r0, [pc, #268]	; (8000f3c <scanDisplayBySPI+0x1a8>)
 8000e30:	f001 fb7b 	bl	800252a <HAL_SPI_Transmit>
        	HAL_SPI_Transmit(&hspi1, &data2, sizeof(data2), HAL_MAX_DELAY);
 8000e34:	1d39      	adds	r1, r7, #4
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	483f      	ldr	r0, [pc, #252]	; (8000f3c <scanDisplayBySPI+0x1a8>)
 8000e3e:	f001 fb74 	bl	800252a <HAL_SPI_Transmit>
        	HAL_SPI_Transmit(&hspi1, &data3, sizeof(data3), HAL_MAX_DELAY);
 8000e42:	1cf9      	adds	r1, r7, #3
 8000e44:	f04f 33ff 	mov.w	r3, #4294967295
 8000e48:	2201      	movs	r2, #1
 8000e4a:	483c      	ldr	r0, [pc, #240]	; (8000f3c <scanDisplayBySPI+0x1a8>)
 8000e4c:	f001 fb6d 	bl	800252a <HAL_SPI_Transmit>
        for (int i=0;i<rowsize;i++) {
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	3301      	adds	r3, #1
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	dbb3      	blt.n	8000dc6 <scanDisplayBySPI+0x32>
        }

        OE_DMD_ROWS_OFF();
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2102      	movs	r1, #2
 8000e62:	482f      	ldr	r0, [pc, #188]	; (8000f20 <scanDisplayBySPI+0x18c>)
 8000e64:	f000 fe5a 	bl	8001b1c <HAL_GPIO_WritePin>
        LATCH_DMD_SHIFT_REG_TO_OUTPUT();
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2110      	movs	r1, #16
 8000e6c:	482c      	ldr	r0, [pc, #176]	; (8000f20 <scanDisplayBySPI+0x18c>)
 8000e6e:	f000 fe55 	bl	8001b1c <HAL_GPIO_WritePin>
 8000e72:	2200      	movs	r2, #0
 8000e74:	2110      	movs	r1, #16
 8000e76:	482a      	ldr	r0, [pc, #168]	; (8000f20 <scanDisplayBySPI+0x18c>)
 8000e78:	f000 fe50 	bl	8001b1c <HAL_GPIO_WritePin>
        switch (bDMDByte) {
 8000e7c:	4b2a      	ldr	r3, [pc, #168]	; (8000f28 <scanDisplayBySPI+0x194>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b03      	cmp	r3, #3
 8000e82:	d843      	bhi.n	8000f0c <scanDisplayBySPI+0x178>
 8000e84:	a201      	add	r2, pc, #4	; (adr r2, 8000e8c <scanDisplayBySPI+0xf8>)
 8000e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8a:	bf00      	nop
 8000e8c:	08000e9d 	.word	0x08000e9d
 8000e90:	08000eb9 	.word	0x08000eb9
 8000e94:	08000ed5 	.word	0x08000ed5
 8000e98:	08000ef1 	.word	0x08000ef1
        case 0:			// row 1, 5, 9, 13 were clocked out
            LIGHT_DMD_ROW_01_05_09_13();
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2108      	movs	r1, #8
 8000ea0:	481f      	ldr	r0, [pc, #124]	; (8000f20 <scanDisplayBySPI+0x18c>)
 8000ea2:	f000 fe3b 	bl	8001b1c <HAL_GPIO_WritePin>
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2104      	movs	r1, #4
 8000eaa:	481d      	ldr	r0, [pc, #116]	; (8000f20 <scanDisplayBySPI+0x18c>)
 8000eac:	f000 fe36 	bl	8001b1c <HAL_GPIO_WritePin>
            bDMDByte=1;
 8000eb0:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <scanDisplayBySPI+0x194>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	701a      	strb	r2, [r3, #0]

            break;
 8000eb6:	e029      	b.n	8000f0c <scanDisplayBySPI+0x178>
        case 1:			// row 2, 6, 10, 14 were clocked out

            LIGHT_DMD_ROW_02_06_10_14();
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2108      	movs	r1, #8
 8000ebc:	4818      	ldr	r0, [pc, #96]	; (8000f20 <scanDisplayBySPI+0x18c>)
 8000ebe:	f000 fe2d 	bl	8001b1c <HAL_GPIO_WritePin>
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2104      	movs	r1, #4
 8000ec6:	4816      	ldr	r0, [pc, #88]	; (8000f20 <scanDisplayBySPI+0x18c>)
 8000ec8:	f000 fe28 	bl	8001b1c <HAL_GPIO_WritePin>
            bDMDByte=2;
 8000ecc:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <scanDisplayBySPI+0x194>)
 8000ece:	2202      	movs	r2, #2
 8000ed0:	701a      	strb	r2, [r3, #0]
            break;
 8000ed2:	e01b      	b.n	8000f0c <scanDisplayBySPI+0x178>
        case 2:			// row 3, 7, 11, 15 were clocked out
            LIGHT_DMD_ROW_03_07_11_15();
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	2108      	movs	r1, #8
 8000ed8:	4811      	ldr	r0, [pc, #68]	; (8000f20 <scanDisplayBySPI+0x18c>)
 8000eda:	f000 fe1f 	bl	8001b1c <HAL_GPIO_WritePin>
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2104      	movs	r1, #4
 8000ee2:	480f      	ldr	r0, [pc, #60]	; (8000f20 <scanDisplayBySPI+0x18c>)
 8000ee4:	f000 fe1a 	bl	8001b1c <HAL_GPIO_WritePin>
            bDMDByte=3;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <scanDisplayBySPI+0x194>)
 8000eea:	2203      	movs	r2, #3
 8000eec:	701a      	strb	r2, [r3, #0]
            break;
 8000eee:	e00d      	b.n	8000f0c <scanDisplayBySPI+0x178>
        case 3:			// row 4, 8, 12, 16 were clocked out
            LIGHT_DMD_ROW_04_08_12_16();
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2108      	movs	r1, #8
 8000ef4:	480a      	ldr	r0, [pc, #40]	; (8000f20 <scanDisplayBySPI+0x18c>)
 8000ef6:	f000 fe11 	bl	8001b1c <HAL_GPIO_WritePin>
 8000efa:	2201      	movs	r2, #1
 8000efc:	2104      	movs	r1, #4
 8000efe:	4808      	ldr	r0, [pc, #32]	; (8000f20 <scanDisplayBySPI+0x18c>)
 8000f00:	f000 fe0c 	bl	8001b1c <HAL_GPIO_WritePin>

            bDMDByte=0;
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <scanDisplayBySPI+0x194>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
            break;
 8000f0a:	bf00      	nop
        }
        OE_DMD_ROWS_ON();
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2102      	movs	r1, #2
 8000f10:	4803      	ldr	r0, [pc, #12]	; (8000f20 <scanDisplayBySPI+0x18c>)
 8000f12:	f000 fe03 	bl	8001b1c <HAL_GPIO_WritePin>
    }
}
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40020000 	.word	0x40020000
 8000f24:	20000080 	.word	0x20000080
 8000f28:	20000081 	.word	0x20000081
 8000f2c:	20000090 	.word	0x20000090
 8000f30:	2000008c 	.word	0x2000008c
 8000f34:	20000088 	.word	0x20000088
 8000f38:	20000084 	.word	0x20000084
 8000f3c:	20000098 	.word	0x20000098

08000f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f46:	f000 fab1 	bl	80014ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4a:	f000 f81f 	bl	8000f8c <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4e:	f000 f90b 	bl	8001168 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f52:	f000 f885 	bl	8001060 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000f56:	f000 f8b9 	bl	80010cc <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  DMD(1, 1);
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f7ff fad5 	bl	800050c <DMD>
  clearScreen(true);
 8000f62:	2001      	movs	r0, #1
 8000f64:	f7ff faae 	bl	80004c4 <clearScreen>
  selectFont(Arial_Black_16);
 8000f68:	4806      	ldr	r0, [pc, #24]	; (8000f84 <main+0x44>)
 8000f6a:	f7ff fcd7 	bl	800091c <selectFont>

    /* USER CODE BEGIN 3 */
//drawFilledBox(0, 0, 12, 12, GRAPHICS_NORMAL);
//	  drawChar(0, 0, 'a', GRAPHICS_NORMAL);
//selectFont(System5x7);
drawString(0,0, "UTEH", 4, GRAPHICS_NORMAL);
 8000f6e:	2300      	movs	r3, #0
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	2304      	movs	r3, #4
 8000f74:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <main+0x48>)
 8000f76:	2100      	movs	r1, #0
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f7ff fe8b 	bl	8000c94 <drawString>
//   drawString(0,9, "STR", 3, GRAPHICS_NORMAL);
	  scanDisplayBySPI();
 8000f7e:	f7ff ff09 	bl	8000d94 <scanDisplayBySPI>
drawString(0,0, "UTEH", 4, GRAPHICS_NORMAL);
 8000f82:	e7f4      	b.n	8000f6e <main+0x2e>
 8000f84:	08003368 	.word	0x08003368
 8000f88:	08003360 	.word	0x08003360

08000f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b094      	sub	sp, #80	; 0x50
 8000f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f92:	f107 0320 	add.w	r3, r7, #32
 8000f96:	2230      	movs	r2, #48	; 0x30
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f002 f990 	bl	80032c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	4b28      	ldr	r3, [pc, #160]	; (8001058 <SystemClock_Config+0xcc>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	4a27      	ldr	r2, [pc, #156]	; (8001058 <SystemClock_Config+0xcc>)
 8000fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc0:	4b25      	ldr	r3, [pc, #148]	; (8001058 <SystemClock_Config+0xcc>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fcc:	2300      	movs	r3, #0
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	4b22      	ldr	r3, [pc, #136]	; (800105c <SystemClock_Config+0xd0>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a21      	ldr	r2, [pc, #132]	; (800105c <SystemClock_Config+0xd0>)
 8000fd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	4b1f      	ldr	r3, [pc, #124]	; (800105c <SystemClock_Config+0xd0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ff6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ffc:	2308      	movs	r3, #8
 8000ffe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001000:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001004:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001006:	2302      	movs	r3, #2
 8001008:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800100a:	2307      	movs	r3, #7
 800100c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100e:	f107 0320 	add.w	r3, r7, #32
 8001012:	4618      	mov	r0, r3
 8001014:	f000 fd9c 	bl	8001b50 <HAL_RCC_OscConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800101e:	f000 f903 	bl	8001228 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001022:	230f      	movs	r3, #15
 8001024:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001026:	2302      	movs	r3, #2
 8001028:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800102e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001032:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001038:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800103a:	f107 030c 	add.w	r3, r7, #12
 800103e:	2105      	movs	r1, #5
 8001040:	4618      	mov	r0, r3
 8001042:	f000 fffd 	bl	8002040 <HAL_RCC_ClockConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800104c:	f000 f8ec 	bl	8001228 <Error_Handler>
  }
}
 8001050:	bf00      	nop
 8001052:	3750      	adds	r7, #80	; 0x50
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40023800 	.word	0x40023800
 800105c:	40007000 	.word	0x40007000

08001060 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001064:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <MX_SPI1_Init+0x64>)
 8001066:	4a18      	ldr	r2, [pc, #96]	; (80010c8 <MX_SPI1_Init+0x68>)
 8001068:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800106a:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <MX_SPI1_Init+0x64>)
 800106c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001070:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <MX_SPI1_Init+0x64>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <MX_SPI1_Init+0x64>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <MX_SPI1_Init+0x64>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <MX_SPI1_Init+0x64>)
 8001086:	2200      	movs	r2, #0
 8001088:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <MX_SPI1_Init+0x64>)
 800108c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001090:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <MX_SPI1_Init+0x64>)
 8001094:	2228      	movs	r2, #40	; 0x28
 8001096:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001098:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <MX_SPI1_Init+0x64>)
 800109a:	2200      	movs	r2, #0
 800109c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <MX_SPI1_Init+0x64>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010a4:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <MX_SPI1_Init+0x64>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <MX_SPI1_Init+0x64>)
 80010ac:	220a      	movs	r2, #10
 80010ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010b0:	4804      	ldr	r0, [pc, #16]	; (80010c4 <MX_SPI1_Init+0x64>)
 80010b2:	f001 f9b1 	bl	8002418 <HAL_SPI_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010bc:	f000 f8b4 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000098 	.word	0x20000098
 80010c8:	40013000 	.word	0x40013000

080010cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010d2:	f107 0308 	add.w	r3, r7, #8
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e0:	463b      	mov	r3, r7
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010e8:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <MX_TIM2_Init+0x98>)
 80010ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400;
 80010f0:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <MX_TIM2_Init+0x98>)
 80010f2:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80010f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f8:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <MX_TIM2_Init+0x98>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80010fe:	4b19      	ldr	r3, [pc, #100]	; (8001164 <MX_TIM2_Init+0x98>)
 8001100:	f242 7210 	movw	r2, #10000	; 0x2710
 8001104:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001106:	4b17      	ldr	r3, [pc, #92]	; (8001164 <MX_TIM2_Init+0x98>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <MX_TIM2_Init+0x98>)
 800110e:	2200      	movs	r2, #0
 8001110:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001112:	4814      	ldr	r0, [pc, #80]	; (8001164 <MX_TIM2_Init+0x98>)
 8001114:	f001 fc10 	bl	8002938 <HAL_TIM_Base_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800111e:	f000 f883 	bl	8001228 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001126:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001128:	f107 0308 	add.w	r3, r7, #8
 800112c:	4619      	mov	r1, r3
 800112e:	480d      	ldr	r0, [pc, #52]	; (8001164 <MX_TIM2_Init+0x98>)
 8001130:	f001 fd59 	bl	8002be6 <HAL_TIM_ConfigClockSource>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800113a:	f000 f875 	bl	8001228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800113e:	2300      	movs	r3, #0
 8001140:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001146:	463b      	mov	r3, r7
 8001148:	4619      	mov	r1, r3
 800114a:	4806      	ldr	r0, [pc, #24]	; (8001164 <MX_TIM2_Init+0x98>)
 800114c:	f001 ff74 	bl	8003038 <HAL_TIMEx_MasterConfigSynchronization>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001156:	f000 f867 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200000f0 	.word	0x200000f0

08001168 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	4b22      	ldr	r3, [pc, #136]	; (800120c <MX_GPIO_Init+0xa4>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a21      	ldr	r2, [pc, #132]	; (800120c <MX_GPIO_Init+0xa4>)
 8001188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b1f      	ldr	r3, [pc, #124]	; (800120c <MX_GPIO_Init+0xa4>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	4b1b      	ldr	r3, [pc, #108]	; (800120c <MX_GPIO_Init+0xa4>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a1a      	ldr	r2, [pc, #104]	; (800120c <MX_GPIO_Init+0xa4>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <MX_GPIO_Init+0xa4>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OE_Pin_Pin|A_PIN_Pin|B_Pin_Pin|sclk_pin_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	211e      	movs	r1, #30
 80011ba:	4815      	ldr	r0, [pc, #84]	; (8001210 <MX_GPIO_Init+0xa8>)
 80011bc:	f000 fcae 	bl	8001b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80011c0:	2201      	movs	r2, #1
 80011c2:	2140      	movs	r1, #64	; 0x40
 80011c4:	4812      	ldr	r0, [pc, #72]	; (8001210 <MX_GPIO_Init+0xa8>)
 80011c6:	f000 fca9 	bl	8001b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OE_Pin_Pin */
  GPIO_InitStruct.Pin = OE_Pin_Pin;
 80011ca:	2302      	movs	r3, #2
 80011cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OE_Pin_GPIO_Port, &GPIO_InitStruct);
 80011da:	f107 030c 	add.w	r3, r7, #12
 80011de:	4619      	mov	r1, r3
 80011e0:	480b      	ldr	r0, [pc, #44]	; (8001210 <MX_GPIO_Init+0xa8>)
 80011e2:	f000 fae7 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_PIN_Pin B_Pin_Pin sclk_pin_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = A_PIN_Pin|B_Pin_Pin|sclk_pin_Pin|SPI_CS_Pin;
 80011e6:	235c      	movs	r3, #92	; 0x5c
 80011e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011ee:	2302      	movs	r3, #2
 80011f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	4619      	mov	r1, r3
 80011fc:	4804      	ldr	r0, [pc, #16]	; (8001210 <MX_GPIO_Init+0xa8>)
 80011fe:	f000 fad9 	bl	80017b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001202:	bf00      	nop
 8001204:	3720      	adds	r7, #32
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800
 8001210:	40020000 	.word	0x40020000

08001214 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
scanDisplayBySPI();
 800121c:	f7ff fdba 	bl	8000d94 <scanDisplayBySPI>
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800122c:	b672      	cpsid	i
}
 800122e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001230:	e7fe      	b.n	8001230 <Error_Handler+0x8>
	...

08001234 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <HAL_MspInit+0x4c>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	4a0f      	ldr	r2, [pc, #60]	; (8001280 <HAL_MspInit+0x4c>)
 8001244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001248:	6453      	str	r3, [r2, #68]	; 0x44
 800124a:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <HAL_MspInit+0x4c>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	603b      	str	r3, [r7, #0]
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <HAL_MspInit+0x4c>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	4a08      	ldr	r2, [pc, #32]	; (8001280 <HAL_MspInit+0x4c>)
 8001260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001264:	6413      	str	r3, [r2, #64]	; 0x40
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <HAL_MspInit+0x4c>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001272:	2007      	movs	r0, #7
 8001274:	f000 fa5c 	bl	8001730 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40023800 	.word	0x40023800

08001284 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	; 0x28
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a19      	ldr	r2, [pc, #100]	; (8001308 <HAL_SPI_MspInit+0x84>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d12b      	bne.n	80012fe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <HAL_SPI_MspInit+0x88>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	4a17      	ldr	r2, [pc, #92]	; (800130c <HAL_SPI_MspInit+0x88>)
 80012b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012b4:	6453      	str	r3, [r2, #68]	; 0x44
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <HAL_SPI_MspInit+0x88>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <HAL_SPI_MspInit+0x88>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a10      	ldr	r2, [pc, #64]	; (800130c <HAL_SPI_MspInit+0x88>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <HAL_SPI_MspInit+0x88>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80012de:	23a0      	movs	r3, #160	; 0xa0
 80012e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ea:	2303      	movs	r3, #3
 80012ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012ee:	2305      	movs	r3, #5
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	4805      	ldr	r0, [pc, #20]	; (8001310 <HAL_SPI_MspInit+0x8c>)
 80012fa:	f000 fa5b 	bl	80017b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012fe:	bf00      	nop
 8001300:	3728      	adds	r7, #40	; 0x28
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40013000 	.word	0x40013000
 800130c:	40023800 	.word	0x40023800
 8001310:	40020000 	.word	0x40020000

08001314 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001324:	d115      	bne.n	8001352 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	4b0c      	ldr	r3, [pc, #48]	; (800135c <HAL_TIM_Base_MspInit+0x48>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	4a0b      	ldr	r2, [pc, #44]	; (800135c <HAL_TIM_Base_MspInit+0x48>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6413      	str	r3, [r2, #64]	; 0x40
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <HAL_TIM_Base_MspInit+0x48>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	2100      	movs	r1, #0
 8001346:	201c      	movs	r0, #28
 8001348:	f000 f9fd 	bl	8001746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800134c:	201c      	movs	r0, #28
 800134e:	f000 fa16 	bl	800177e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800

08001360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <NMI_Handler+0x4>

08001366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136a:	e7fe      	b.n	800136a <HardFault_Handler+0x4>

0800136c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <MemManage_Handler+0x4>

08001372 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001376:	e7fe      	b.n	8001376 <BusFault_Handler+0x4>

08001378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800137c:	e7fe      	b.n	800137c <UsageFault_Handler+0x4>

0800137e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ac:	f000 f8d0 	bl	8001550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013b8:	4802      	ldr	r0, [pc, #8]	; (80013c4 <TIM2_IRQHandler+0x10>)
 80013ba:	f001 fb0c 	bl	80029d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200000f0 	.word	0x200000f0

080013c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d0:	4a14      	ldr	r2, [pc, #80]	; (8001424 <_sbrk+0x5c>)
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <_sbrk+0x60>)
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013dc:	4b13      	ldr	r3, [pc, #76]	; (800142c <_sbrk+0x64>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d102      	bne.n	80013ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <_sbrk+0x64>)
 80013e6:	4a12      	ldr	r2, [pc, #72]	; (8001430 <_sbrk+0x68>)
 80013e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <_sbrk+0x64>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d207      	bcs.n	8001408 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f8:	f001 ff7a 	bl	80032f0 <__errno>
 80013fc:	4603      	mov	r3, r0
 80013fe:	220c      	movs	r2, #12
 8001400:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001402:	f04f 33ff 	mov.w	r3, #4294967295
 8001406:	e009      	b.n	800141c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <_sbrk+0x64>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800140e:	4b07      	ldr	r3, [pc, #28]	; (800142c <_sbrk+0x64>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	4a05      	ldr	r2, [pc, #20]	; (800142c <_sbrk+0x64>)
 8001418:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800141a:	68fb      	ldr	r3, [r7, #12]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20020000 	.word	0x20020000
 8001428:	00000400 	.word	0x00000400
 800142c:	20000138 	.word	0x20000138
 8001430:	20000288 	.word	0x20000288

08001434 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <SystemInit+0x20>)
 800143a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800143e:	4a05      	ldr	r2, [pc, #20]	; (8001454 <SystemInit+0x20>)
 8001440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001458:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001490 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800145c:	480d      	ldr	r0, [pc, #52]	; (8001494 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800145e:	490e      	ldr	r1, [pc, #56]	; (8001498 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001460:	4a0e      	ldr	r2, [pc, #56]	; (800149c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001464:	e002      	b.n	800146c <LoopCopyDataInit>

08001466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146a:	3304      	adds	r3, #4

0800146c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800146c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001470:	d3f9      	bcc.n	8001466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001472:	4a0b      	ldr	r2, [pc, #44]	; (80014a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001474:	4c0b      	ldr	r4, [pc, #44]	; (80014a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001478:	e001      	b.n	800147e <LoopFillZerobss>

0800147a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800147c:	3204      	adds	r2, #4

0800147e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001480:	d3fb      	bcc.n	800147a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001482:	f7ff ffd7 	bl	8001434 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001486:	f001 ff39 	bl	80032fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800148a:	f7ff fd59 	bl	8000f40 <main>
  bx  lr    
 800148e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001490:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001498:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800149c:	080039f4 	.word	0x080039f4
  ldr r2, =_sbss
 80014a0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80014a4:	20000288 	.word	0x20000288

080014a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014a8:	e7fe      	b.n	80014a8 <ADC_IRQHandler>
	...

080014ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014b0:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <HAL_Init+0x40>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a0d      	ldr	r2, [pc, #52]	; (80014ec <HAL_Init+0x40>)
 80014b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014bc:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <HAL_Init+0x40>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <HAL_Init+0x40>)
 80014c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <HAL_Init+0x40>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a07      	ldr	r2, [pc, #28]	; (80014ec <HAL_Init+0x40>)
 80014ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d4:	2003      	movs	r0, #3
 80014d6:	f000 f92b 	bl	8001730 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014da:	2000      	movs	r0, #0
 80014dc:	f000 f808 	bl	80014f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e0:	f7ff fea8 	bl	8001234 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40023c00 	.word	0x40023c00

080014f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_InitTick+0x54>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <HAL_InitTick+0x58>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4619      	mov	r1, r3
 8001502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001506:	fbb3 f3f1 	udiv	r3, r3, r1
 800150a:	fbb2 f3f3 	udiv	r3, r2, r3
 800150e:	4618      	mov	r0, r3
 8001510:	f000 f943 	bl	800179a <HAL_SYSTICK_Config>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e00e      	b.n	800153c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b0f      	cmp	r3, #15
 8001522:	d80a      	bhi.n	800153a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001524:	2200      	movs	r2, #0
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	f04f 30ff 	mov.w	r0, #4294967295
 800152c:	f000 f90b 	bl	8001746 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001530:	4a06      	ldr	r2, [pc, #24]	; (800154c <HAL_InitTick+0x5c>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	e000      	b.n	800153c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000008 	.word	0x20000008
 8001548:	20000010 	.word	0x20000010
 800154c:	2000000c 	.word	0x2000000c

08001550 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_IncTick+0x20>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	461a      	mov	r2, r3
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <HAL_IncTick+0x24>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4413      	add	r3, r2
 8001560:	4a04      	ldr	r2, [pc, #16]	; (8001574 <HAL_IncTick+0x24>)
 8001562:	6013      	str	r3, [r2, #0]
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	20000010 	.word	0x20000010
 8001574:	2000013c 	.word	0x2000013c

08001578 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return uwTick;
 800157c:	4b03      	ldr	r3, [pc, #12]	; (800158c <HAL_GetTick+0x14>)
 800157e:	681b      	ldr	r3, [r3, #0]
}
 8001580:	4618      	mov	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	2000013c 	.word	0x2000013c

08001590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <__NVIC_SetPriorityGrouping+0x44>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015ac:	4013      	ands	r3, r2
 80015ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c2:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <__NVIC_SetPriorityGrouping+0x44>)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	60d3      	str	r3, [r2, #12]
}
 80015c8:	bf00      	nop
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015dc:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <__NVIC_GetPriorityGrouping+0x18>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	0a1b      	lsrs	r3, r3, #8
 80015e2:	f003 0307 	and.w	r3, r3, #7
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	2b00      	cmp	r3, #0
 8001604:	db0b      	blt.n	800161e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	f003 021f 	and.w	r2, r3, #31
 800160c:	4907      	ldr	r1, [pc, #28]	; (800162c <__NVIC_EnableIRQ+0x38>)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	095b      	lsrs	r3, r3, #5
 8001614:	2001      	movs	r0, #1
 8001616:	fa00 f202 	lsl.w	r2, r0, r2
 800161a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000e100 	.word	0xe000e100

08001630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	6039      	str	r1, [r7, #0]
 800163a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001640:	2b00      	cmp	r3, #0
 8001642:	db0a      	blt.n	800165a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	b2da      	uxtb	r2, r3
 8001648:	490c      	ldr	r1, [pc, #48]	; (800167c <__NVIC_SetPriority+0x4c>)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	0112      	lsls	r2, r2, #4
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	440b      	add	r3, r1
 8001654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001658:	e00a      	b.n	8001670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	b2da      	uxtb	r2, r3
 800165e:	4908      	ldr	r1, [pc, #32]	; (8001680 <__NVIC_SetPriority+0x50>)
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	3b04      	subs	r3, #4
 8001668:	0112      	lsls	r2, r2, #4
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	440b      	add	r3, r1
 800166e:	761a      	strb	r2, [r3, #24]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000e100 	.word	0xe000e100
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001684:	b480      	push	{r7}
 8001686:	b089      	sub	sp, #36	; 0x24
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f1c3 0307 	rsb	r3, r3, #7
 800169e:	2b04      	cmp	r3, #4
 80016a0:	bf28      	it	cs
 80016a2:	2304      	movcs	r3, #4
 80016a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3304      	adds	r3, #4
 80016aa:	2b06      	cmp	r3, #6
 80016ac:	d902      	bls.n	80016b4 <NVIC_EncodePriority+0x30>
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3b03      	subs	r3, #3
 80016b2:	e000      	b.n	80016b6 <NVIC_EncodePriority+0x32>
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	f04f 32ff 	mov.w	r2, #4294967295
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43da      	mvns	r2, r3
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	401a      	ands	r2, r3
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016cc:	f04f 31ff 	mov.w	r1, #4294967295
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	fa01 f303 	lsl.w	r3, r1, r3
 80016d6:	43d9      	mvns	r1, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016dc:	4313      	orrs	r3, r2
         );
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3724      	adds	r7, #36	; 0x24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016fc:	d301      	bcc.n	8001702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016fe:	2301      	movs	r3, #1
 8001700:	e00f      	b.n	8001722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001702:	4a0a      	ldr	r2, [pc, #40]	; (800172c <SysTick_Config+0x40>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170a:	210f      	movs	r1, #15
 800170c:	f04f 30ff 	mov.w	r0, #4294967295
 8001710:	f7ff ff8e 	bl	8001630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <SysTick_Config+0x40>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171a:	4b04      	ldr	r3, [pc, #16]	; (800172c <SysTick_Config+0x40>)
 800171c:	2207      	movs	r2, #7
 800171e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	e000e010 	.word	0xe000e010

08001730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff29 	bl	8001590 <__NVIC_SetPriorityGrouping>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001758:	f7ff ff3e 	bl	80015d8 <__NVIC_GetPriorityGrouping>
 800175c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	6978      	ldr	r0, [r7, #20]
 8001764:	f7ff ff8e 	bl	8001684 <NVIC_EncodePriority>
 8001768:	4602      	mov	r2, r0
 800176a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176e:	4611      	mov	r1, r2
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff5d 	bl	8001630 <__NVIC_SetPriority>
}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	4603      	mov	r3, r0
 8001786:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff31 	bl	80015f4 <__NVIC_EnableIRQ>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff ffa2 	bl	80016ec <SysTick_Config>
 80017a8:	4603      	mov	r3, r0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b089      	sub	sp, #36	; 0x24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
 80017ce:	e16b      	b.n	8001aa8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017d0:	2201      	movs	r2, #1
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	f040 815a 	bne.w	8001aa2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d005      	beq.n	8001806 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001802:	2b02      	cmp	r3, #2
 8001804:	d130      	bne.n	8001868 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	2203      	movs	r2, #3
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4013      	ands	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	68da      	ldr	r2, [r3, #12]
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800183c:	2201      	movs	r2, #1
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	091b      	lsrs	r3, r3, #4
 8001852:	f003 0201 	and.w	r2, r3, #1
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4313      	orrs	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	2b03      	cmp	r3, #3
 8001872:	d017      	beq.n	80018a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	2203      	movs	r2, #3
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 0303 	and.w	r3, r3, #3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d123      	bne.n	80018f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	08da      	lsrs	r2, r3, #3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3208      	adds	r2, #8
 80018b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	220f      	movs	r2, #15
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	691a      	ldr	r2, [r3, #16]
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	08da      	lsrs	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3208      	adds	r2, #8
 80018f2:	69b9      	ldr	r1, [r7, #24]
 80018f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	2203      	movs	r2, #3
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 0203 	and.w	r2, r3, #3
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001934:	2b00      	cmp	r3, #0
 8001936:	f000 80b4 	beq.w	8001aa2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	4b60      	ldr	r3, [pc, #384]	; (8001ac0 <HAL_GPIO_Init+0x30c>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	4a5f      	ldr	r2, [pc, #380]	; (8001ac0 <HAL_GPIO_Init+0x30c>)
 8001944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001948:	6453      	str	r3, [r2, #68]	; 0x44
 800194a:	4b5d      	ldr	r3, [pc, #372]	; (8001ac0 <HAL_GPIO_Init+0x30c>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001956:	4a5b      	ldr	r2, [pc, #364]	; (8001ac4 <HAL_GPIO_Init+0x310>)
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	089b      	lsrs	r3, r3, #2
 800195c:	3302      	adds	r3, #2
 800195e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	220f      	movs	r2, #15
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4013      	ands	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a52      	ldr	r2, [pc, #328]	; (8001ac8 <HAL_GPIO_Init+0x314>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d02b      	beq.n	80019da <HAL_GPIO_Init+0x226>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a51      	ldr	r2, [pc, #324]	; (8001acc <HAL_GPIO_Init+0x318>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d025      	beq.n	80019d6 <HAL_GPIO_Init+0x222>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a50      	ldr	r2, [pc, #320]	; (8001ad0 <HAL_GPIO_Init+0x31c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d01f      	beq.n	80019d2 <HAL_GPIO_Init+0x21e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a4f      	ldr	r2, [pc, #316]	; (8001ad4 <HAL_GPIO_Init+0x320>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d019      	beq.n	80019ce <HAL_GPIO_Init+0x21a>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a4e      	ldr	r2, [pc, #312]	; (8001ad8 <HAL_GPIO_Init+0x324>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d013      	beq.n	80019ca <HAL_GPIO_Init+0x216>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a4d      	ldr	r2, [pc, #308]	; (8001adc <HAL_GPIO_Init+0x328>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d00d      	beq.n	80019c6 <HAL_GPIO_Init+0x212>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a4c      	ldr	r2, [pc, #304]	; (8001ae0 <HAL_GPIO_Init+0x32c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d007      	beq.n	80019c2 <HAL_GPIO_Init+0x20e>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a4b      	ldr	r2, [pc, #300]	; (8001ae4 <HAL_GPIO_Init+0x330>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d101      	bne.n	80019be <HAL_GPIO_Init+0x20a>
 80019ba:	2307      	movs	r3, #7
 80019bc:	e00e      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019be:	2308      	movs	r3, #8
 80019c0:	e00c      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019c2:	2306      	movs	r3, #6
 80019c4:	e00a      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019c6:	2305      	movs	r3, #5
 80019c8:	e008      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019ca:	2304      	movs	r3, #4
 80019cc:	e006      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019ce:	2303      	movs	r3, #3
 80019d0:	e004      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e002      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019d6:	2301      	movs	r3, #1
 80019d8:	e000      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019da:	2300      	movs	r3, #0
 80019dc:	69fa      	ldr	r2, [r7, #28]
 80019de:	f002 0203 	and.w	r2, r2, #3
 80019e2:	0092      	lsls	r2, r2, #2
 80019e4:	4093      	lsls	r3, r2
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019ec:	4935      	ldr	r1, [pc, #212]	; (8001ac4 <HAL_GPIO_Init+0x310>)
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	089b      	lsrs	r3, r3, #2
 80019f2:	3302      	adds	r3, #2
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019fa:	4b3b      	ldr	r3, [pc, #236]	; (8001ae8 <HAL_GPIO_Init+0x334>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a1e:	4a32      	ldr	r2, [pc, #200]	; (8001ae8 <HAL_GPIO_Init+0x334>)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a24:	4b30      	ldr	r3, [pc, #192]	; (8001ae8 <HAL_GPIO_Init+0x334>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a48:	4a27      	ldr	r2, [pc, #156]	; (8001ae8 <HAL_GPIO_Init+0x334>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a4e:	4b26      	ldr	r3, [pc, #152]	; (8001ae8 <HAL_GPIO_Init+0x334>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a72:	4a1d      	ldr	r2, [pc, #116]	; (8001ae8 <HAL_GPIO_Init+0x334>)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a78:	4b1b      	ldr	r3, [pc, #108]	; (8001ae8 <HAL_GPIO_Init+0x334>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a9c:	4a12      	ldr	r2, [pc, #72]	; (8001ae8 <HAL_GPIO_Init+0x334>)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	61fb      	str	r3, [r7, #28]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	2b0f      	cmp	r3, #15
 8001aac:	f67f ae90 	bls.w	80017d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	3724      	adds	r7, #36	; 0x24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40013800 	.word	0x40013800
 8001ac8:	40020000 	.word	0x40020000
 8001acc:	40020400 	.word	0x40020400
 8001ad0:	40020800 	.word	0x40020800
 8001ad4:	40020c00 	.word	0x40020c00
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40021400 	.word	0x40021400
 8001ae0:	40021800 	.word	0x40021800
 8001ae4:	40021c00 	.word	0x40021c00
 8001ae8:	40013c00 	.word	0x40013c00

08001aec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691a      	ldr	r2, [r3, #16]
 8001afc:	887b      	ldrh	r3, [r7, #2]
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d002      	beq.n	8001b0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b04:	2301      	movs	r3, #1
 8001b06:	73fb      	strb	r3, [r7, #15]
 8001b08:	e001      	b.n	8001b0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	807b      	strh	r3, [r7, #2]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b2c:	787b      	ldrb	r3, [r7, #1]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b32:	887a      	ldrh	r2, [r7, #2]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b38:	e003      	b.n	8001b42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b3a:	887b      	ldrh	r3, [r7, #2]
 8001b3c:	041a      	lsls	r2, r3, #16
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	619a      	str	r2, [r3, #24]
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e267      	b.n	8002032 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d075      	beq.n	8001c5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b6e:	4b88      	ldr	r3, [pc, #544]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 030c 	and.w	r3, r3, #12
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d00c      	beq.n	8001b94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b7a:	4b85      	ldr	r3, [pc, #532]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d112      	bne.n	8001bac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b86:	4b82      	ldr	r3, [pc, #520]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b92:	d10b      	bne.n	8001bac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b94:	4b7e      	ldr	r3, [pc, #504]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d05b      	beq.n	8001c58 <HAL_RCC_OscConfig+0x108>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d157      	bne.n	8001c58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e242      	b.n	8002032 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb4:	d106      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x74>
 8001bb6:	4b76      	ldr	r3, [pc, #472]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a75      	ldr	r2, [pc, #468]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	e01d      	b.n	8001c00 <HAL_RCC_OscConfig+0xb0>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bcc:	d10c      	bne.n	8001be8 <HAL_RCC_OscConfig+0x98>
 8001bce:	4b70      	ldr	r3, [pc, #448]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a6f      	ldr	r2, [pc, #444]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	4b6d      	ldr	r3, [pc, #436]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a6c      	ldr	r2, [pc, #432]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	e00b      	b.n	8001c00 <HAL_RCC_OscConfig+0xb0>
 8001be8:	4b69      	ldr	r3, [pc, #420]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a68      	ldr	r2, [pc, #416]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	4b66      	ldr	r3, [pc, #408]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a65      	ldr	r2, [pc, #404]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d013      	beq.n	8001c30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c08:	f7ff fcb6 	bl	8001578 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c10:	f7ff fcb2 	bl	8001578 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b64      	cmp	r3, #100	; 0x64
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e207      	b.n	8002032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c22:	4b5b      	ldr	r3, [pc, #364]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0f0      	beq.n	8001c10 <HAL_RCC_OscConfig+0xc0>
 8001c2e:	e014      	b.n	8001c5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c30:	f7ff fca2 	bl	8001578 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c38:	f7ff fc9e 	bl	8001578 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b64      	cmp	r3, #100	; 0x64
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e1f3      	b.n	8002032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4a:	4b51      	ldr	r3, [pc, #324]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0xe8>
 8001c56:	e000      	b.n	8001c5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d063      	beq.n	8001d2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c66:	4b4a      	ldr	r3, [pc, #296]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00b      	beq.n	8001c8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c72:	4b47      	ldr	r3, [pc, #284]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d11c      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c7e:	4b44      	ldr	r3, [pc, #272]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d116      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8a:	4b41      	ldr	r3, [pc, #260]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d005      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x152>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d001      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e1c7      	b.n	8002032 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca2:	4b3b      	ldr	r3, [pc, #236]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	4937      	ldr	r1, [pc, #220]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb6:	e03a      	b.n	8001d2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d020      	beq.n	8001d02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc0:	4b34      	ldr	r3, [pc, #208]	; (8001d94 <HAL_RCC_OscConfig+0x244>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc6:	f7ff fc57 	bl	8001578 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cce:	f7ff fc53 	bl	8001578 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e1a8      	b.n	8002032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce0:	4b2b      	ldr	r3, [pc, #172]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0f0      	beq.n	8001cce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cec:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4925      	ldr	r1, [pc, #148]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	600b      	str	r3, [r1, #0]
 8001d00:	e015      	b.n	8001d2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d02:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <HAL_RCC_OscConfig+0x244>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d08:	f7ff fc36 	bl	8001578 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d10:	f7ff fc32 	bl	8001578 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e187      	b.n	8002032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d22:	4b1b      	ldr	r3, [pc, #108]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d036      	beq.n	8001da8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d016      	beq.n	8001d70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d42:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <HAL_RCC_OscConfig+0x248>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d48:	f7ff fc16 	bl	8001578 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d50:	f7ff fc12 	bl	8001578 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e167      	b.n	8002032 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d62:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0x200>
 8001d6e:	e01b      	b.n	8001da8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d70:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_RCC_OscConfig+0x248>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d76:	f7ff fbff 	bl	8001578 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d7c:	e00e      	b.n	8001d9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d7e:	f7ff fbfb 	bl	8001578 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d907      	bls.n	8001d9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e150      	b.n	8002032 <HAL_RCC_OscConfig+0x4e2>
 8001d90:	40023800 	.word	0x40023800
 8001d94:	42470000 	.word	0x42470000
 8001d98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d9c:	4b88      	ldr	r3, [pc, #544]	; (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1ea      	bne.n	8001d7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f000 8097 	beq.w	8001ee4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001db6:	2300      	movs	r3, #0
 8001db8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dba:	4b81      	ldr	r3, [pc, #516]	; (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10f      	bne.n	8001de6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	4b7d      	ldr	r3, [pc, #500]	; (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	4a7c      	ldr	r2, [pc, #496]	; (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd6:	4b7a      	ldr	r3, [pc, #488]	; (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001de2:	2301      	movs	r3, #1
 8001de4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de6:	4b77      	ldr	r3, [pc, #476]	; (8001fc4 <HAL_RCC_OscConfig+0x474>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d118      	bne.n	8001e24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001df2:	4b74      	ldr	r3, [pc, #464]	; (8001fc4 <HAL_RCC_OscConfig+0x474>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a73      	ldr	r2, [pc, #460]	; (8001fc4 <HAL_RCC_OscConfig+0x474>)
 8001df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dfe:	f7ff fbbb 	bl	8001578 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e06:	f7ff fbb7 	bl	8001578 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e10c      	b.n	8002032 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e18:	4b6a      	ldr	r3, [pc, #424]	; (8001fc4 <HAL_RCC_OscConfig+0x474>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0f0      	beq.n	8001e06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d106      	bne.n	8001e3a <HAL_RCC_OscConfig+0x2ea>
 8001e2c:	4b64      	ldr	r3, [pc, #400]	; (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e30:	4a63      	ldr	r2, [pc, #396]	; (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	6713      	str	r3, [r2, #112]	; 0x70
 8001e38:	e01c      	b.n	8001e74 <HAL_RCC_OscConfig+0x324>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2b05      	cmp	r3, #5
 8001e40:	d10c      	bne.n	8001e5c <HAL_RCC_OscConfig+0x30c>
 8001e42:	4b5f      	ldr	r3, [pc, #380]	; (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e46:	4a5e      	ldr	r2, [pc, #376]	; (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001e48:	f043 0304 	orr.w	r3, r3, #4
 8001e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e4e:	4b5c      	ldr	r3, [pc, #368]	; (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e52:	4a5b      	ldr	r2, [pc, #364]	; (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6713      	str	r3, [r2, #112]	; 0x70
 8001e5a:	e00b      	b.n	8001e74 <HAL_RCC_OscConfig+0x324>
 8001e5c:	4b58      	ldr	r3, [pc, #352]	; (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e60:	4a57      	ldr	r2, [pc, #348]	; (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001e62:	f023 0301 	bic.w	r3, r3, #1
 8001e66:	6713      	str	r3, [r2, #112]	; 0x70
 8001e68:	4b55      	ldr	r3, [pc, #340]	; (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6c:	4a54      	ldr	r2, [pc, #336]	; (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001e6e:	f023 0304 	bic.w	r3, r3, #4
 8001e72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d015      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7c:	f7ff fb7c 	bl	8001578 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e82:	e00a      	b.n	8001e9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e84:	f7ff fb78 	bl	8001578 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e0cb      	b.n	8002032 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9a:	4b49      	ldr	r3, [pc, #292]	; (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0ee      	beq.n	8001e84 <HAL_RCC_OscConfig+0x334>
 8001ea6:	e014      	b.n	8001ed2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea8:	f7ff fb66 	bl	8001578 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eae:	e00a      	b.n	8001ec6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb0:	f7ff fb62 	bl	8001578 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e0b5      	b.n	8002032 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec6:	4b3e      	ldr	r3, [pc, #248]	; (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1ee      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ed2:	7dfb      	ldrb	r3, [r7, #23]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d105      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed8:	4b39      	ldr	r3, [pc, #228]	; (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	4a38      	ldr	r2, [pc, #224]	; (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001ede:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 80a1 	beq.w	8002030 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001eee:	4b34      	ldr	r3, [pc, #208]	; (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d05c      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d141      	bne.n	8001f86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f02:	4b31      	ldr	r3, [pc, #196]	; (8001fc8 <HAL_RCC_OscConfig+0x478>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f08:	f7ff fb36 	bl	8001578 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f10:	f7ff fb32 	bl	8001578 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e087      	b.n	8002032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f22:	4b27      	ldr	r3, [pc, #156]	; (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69da      	ldr	r2, [r3, #28]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	019b      	lsls	r3, r3, #6
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f44:	085b      	lsrs	r3, r3, #1
 8001f46:	3b01      	subs	r3, #1
 8001f48:	041b      	lsls	r3, r3, #16
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f50:	061b      	lsls	r3, r3, #24
 8001f52:	491b      	ldr	r1, [pc, #108]	; (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f58:	4b1b      	ldr	r3, [pc, #108]	; (8001fc8 <HAL_RCC_OscConfig+0x478>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5e:	f7ff fb0b 	bl	8001578 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f66:	f7ff fb07 	bl	8001578 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e05c      	b.n	8002032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f78:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0f0      	beq.n	8001f66 <HAL_RCC_OscConfig+0x416>
 8001f84:	e054      	b.n	8002030 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f86:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <HAL_RCC_OscConfig+0x478>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8c:	f7ff faf4 	bl	8001578 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f94:	f7ff faf0 	bl	8001578 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e045      	b.n	8002032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa6:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_RCC_OscConfig+0x470>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f0      	bne.n	8001f94 <HAL_RCC_OscConfig+0x444>
 8001fb2:	e03d      	b.n	8002030 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d107      	bne.n	8001fcc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e038      	b.n	8002032 <HAL_RCC_OscConfig+0x4e2>
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40007000 	.word	0x40007000
 8001fc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fcc:	4b1b      	ldr	r3, [pc, #108]	; (800203c <HAL_RCC_OscConfig+0x4ec>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d028      	beq.n	800202c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d121      	bne.n	800202c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d11a      	bne.n	800202c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002002:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002004:	4293      	cmp	r3, r2
 8002006:	d111      	bne.n	800202c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002012:	085b      	lsrs	r3, r3, #1
 8002014:	3b01      	subs	r3, #1
 8002016:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002018:	429a      	cmp	r2, r3
 800201a:	d107      	bne.n	800202c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002026:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002028:	429a      	cmp	r2, r3
 800202a:	d001      	beq.n	8002030 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e000      	b.n	8002032 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40023800 	.word	0x40023800

08002040 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0cc      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002054:	4b68      	ldr	r3, [pc, #416]	; (80021f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d90c      	bls.n	800207c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002062:	4b65      	ldr	r3, [pc, #404]	; (80021f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800206a:	4b63      	ldr	r3, [pc, #396]	; (80021f8 <HAL_RCC_ClockConfig+0x1b8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	429a      	cmp	r2, r3
 8002076:	d001      	beq.n	800207c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0b8      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d020      	beq.n	80020ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002094:	4b59      	ldr	r3, [pc, #356]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	4a58      	ldr	r2, [pc, #352]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 800209a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800209e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020ac:	4b53      	ldr	r3, [pc, #332]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	4a52      	ldr	r2, [pc, #328]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80020b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b8:	4b50      	ldr	r3, [pc, #320]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	494d      	ldr	r1, [pc, #308]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d044      	beq.n	8002160 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d107      	bne.n	80020ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020de:	4b47      	ldr	r3, [pc, #284]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d119      	bne.n	800211e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e07f      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d003      	beq.n	80020fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d107      	bne.n	800210e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fe:	4b3f      	ldr	r3, [pc, #252]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d109      	bne.n	800211e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e06f      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210e:	4b3b      	ldr	r3, [pc, #236]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e067      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800211e:	4b37      	ldr	r3, [pc, #220]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f023 0203 	bic.w	r2, r3, #3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	4934      	ldr	r1, [pc, #208]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 800212c:	4313      	orrs	r3, r2
 800212e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002130:	f7ff fa22 	bl	8001578 <HAL_GetTick>
 8002134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002136:	e00a      	b.n	800214e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002138:	f7ff fa1e 	bl	8001578 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	f241 3288 	movw	r2, #5000	; 0x1388
 8002146:	4293      	cmp	r3, r2
 8002148:	d901      	bls.n	800214e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e04f      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214e:	4b2b      	ldr	r3, [pc, #172]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 020c 	and.w	r2, r3, #12
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	429a      	cmp	r2, r3
 800215e:	d1eb      	bne.n	8002138 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002160:	4b25      	ldr	r3, [pc, #148]	; (80021f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d20c      	bcs.n	8002188 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216e:	4b22      	ldr	r3, [pc, #136]	; (80021f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002176:	4b20      	ldr	r3, [pc, #128]	; (80021f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d001      	beq.n	8002188 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e032      	b.n	80021ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b00      	cmp	r3, #0
 8002192:	d008      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002194:	4b19      	ldr	r3, [pc, #100]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	4916      	ldr	r1, [pc, #88]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d009      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021b2:	4b12      	ldr	r3, [pc, #72]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	490e      	ldr	r1, [pc, #56]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021c6:	f000 f821 	bl	800220c <HAL_RCC_GetSysClockFreq>
 80021ca:	4602      	mov	r2, r0
 80021cc:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	490a      	ldr	r1, [pc, #40]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 80021d8:	5ccb      	ldrb	r3, [r1, r3]
 80021da:	fa22 f303 	lsr.w	r3, r2, r3
 80021de:	4a09      	ldr	r2, [pc, #36]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80021e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_RCC_ClockConfig+0x1c8>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff f982 	bl	80014f0 <HAL_InitTick>

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40023c00 	.word	0x40023c00
 80021fc:	40023800 	.word	0x40023800
 8002200:	080039d4 	.word	0x080039d4
 8002204:	20000008 	.word	0x20000008
 8002208:	2000000c 	.word	0x2000000c

0800220c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800220c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002210:	b094      	sub	sp, #80	; 0x50
 8002212:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	647b      	str	r3, [r7, #68]	; 0x44
 8002218:	2300      	movs	r3, #0
 800221a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800221c:	2300      	movs	r3, #0
 800221e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002224:	4b79      	ldr	r3, [pc, #484]	; (800240c <HAL_RCC_GetSysClockFreq+0x200>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 030c 	and.w	r3, r3, #12
 800222c:	2b08      	cmp	r3, #8
 800222e:	d00d      	beq.n	800224c <HAL_RCC_GetSysClockFreq+0x40>
 8002230:	2b08      	cmp	r3, #8
 8002232:	f200 80e1 	bhi.w	80023f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002236:	2b00      	cmp	r3, #0
 8002238:	d002      	beq.n	8002240 <HAL_RCC_GetSysClockFreq+0x34>
 800223a:	2b04      	cmp	r3, #4
 800223c:	d003      	beq.n	8002246 <HAL_RCC_GetSysClockFreq+0x3a>
 800223e:	e0db      	b.n	80023f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002240:	4b73      	ldr	r3, [pc, #460]	; (8002410 <HAL_RCC_GetSysClockFreq+0x204>)
 8002242:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002244:	e0db      	b.n	80023fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002246:	4b73      	ldr	r3, [pc, #460]	; (8002414 <HAL_RCC_GetSysClockFreq+0x208>)
 8002248:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800224a:	e0d8      	b.n	80023fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800224c:	4b6f      	ldr	r3, [pc, #444]	; (800240c <HAL_RCC_GetSysClockFreq+0x200>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002254:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002256:	4b6d      	ldr	r3, [pc, #436]	; (800240c <HAL_RCC_GetSysClockFreq+0x200>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d063      	beq.n	800232a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002262:	4b6a      	ldr	r3, [pc, #424]	; (800240c <HAL_RCC_GetSysClockFreq+0x200>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	099b      	lsrs	r3, r3, #6
 8002268:	2200      	movs	r2, #0
 800226a:	63bb      	str	r3, [r7, #56]	; 0x38
 800226c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800226e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002274:	633b      	str	r3, [r7, #48]	; 0x30
 8002276:	2300      	movs	r3, #0
 8002278:	637b      	str	r3, [r7, #52]	; 0x34
 800227a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800227e:	4622      	mov	r2, r4
 8002280:	462b      	mov	r3, r5
 8002282:	f04f 0000 	mov.w	r0, #0
 8002286:	f04f 0100 	mov.w	r1, #0
 800228a:	0159      	lsls	r1, r3, #5
 800228c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002290:	0150      	lsls	r0, r2, #5
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	4621      	mov	r1, r4
 8002298:	1a51      	subs	r1, r2, r1
 800229a:	6139      	str	r1, [r7, #16]
 800229c:	4629      	mov	r1, r5
 800229e:	eb63 0301 	sbc.w	r3, r3, r1
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	f04f 0300 	mov.w	r3, #0
 80022ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022b0:	4659      	mov	r1, fp
 80022b2:	018b      	lsls	r3, r1, #6
 80022b4:	4651      	mov	r1, sl
 80022b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022ba:	4651      	mov	r1, sl
 80022bc:	018a      	lsls	r2, r1, #6
 80022be:	4651      	mov	r1, sl
 80022c0:	ebb2 0801 	subs.w	r8, r2, r1
 80022c4:	4659      	mov	r1, fp
 80022c6:	eb63 0901 	sbc.w	r9, r3, r1
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	f04f 0300 	mov.w	r3, #0
 80022d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022de:	4690      	mov	r8, r2
 80022e0:	4699      	mov	r9, r3
 80022e2:	4623      	mov	r3, r4
 80022e4:	eb18 0303 	adds.w	r3, r8, r3
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	462b      	mov	r3, r5
 80022ec:	eb49 0303 	adc.w	r3, r9, r3
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	f04f 0300 	mov.w	r3, #0
 80022fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022fe:	4629      	mov	r1, r5
 8002300:	024b      	lsls	r3, r1, #9
 8002302:	4621      	mov	r1, r4
 8002304:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002308:	4621      	mov	r1, r4
 800230a:	024a      	lsls	r2, r1, #9
 800230c:	4610      	mov	r0, r2
 800230e:	4619      	mov	r1, r3
 8002310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002312:	2200      	movs	r2, #0
 8002314:	62bb      	str	r3, [r7, #40]	; 0x28
 8002316:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002318:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800231c:	f7fd ff54 	bl	80001c8 <__aeabi_uldivmod>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4613      	mov	r3, r2
 8002326:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002328:	e058      	b.n	80023dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800232a:	4b38      	ldr	r3, [pc, #224]	; (800240c <HAL_RCC_GetSysClockFreq+0x200>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	099b      	lsrs	r3, r3, #6
 8002330:	2200      	movs	r2, #0
 8002332:	4618      	mov	r0, r3
 8002334:	4611      	mov	r1, r2
 8002336:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800233a:	623b      	str	r3, [r7, #32]
 800233c:	2300      	movs	r3, #0
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
 8002340:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002344:	4642      	mov	r2, r8
 8002346:	464b      	mov	r3, r9
 8002348:	f04f 0000 	mov.w	r0, #0
 800234c:	f04f 0100 	mov.w	r1, #0
 8002350:	0159      	lsls	r1, r3, #5
 8002352:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002356:	0150      	lsls	r0, r2, #5
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	4641      	mov	r1, r8
 800235e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002362:	4649      	mov	r1, r9
 8002364:	eb63 0b01 	sbc.w	fp, r3, r1
 8002368:	f04f 0200 	mov.w	r2, #0
 800236c:	f04f 0300 	mov.w	r3, #0
 8002370:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002374:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002378:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800237c:	ebb2 040a 	subs.w	r4, r2, sl
 8002380:	eb63 050b 	sbc.w	r5, r3, fp
 8002384:	f04f 0200 	mov.w	r2, #0
 8002388:	f04f 0300 	mov.w	r3, #0
 800238c:	00eb      	lsls	r3, r5, #3
 800238e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002392:	00e2      	lsls	r2, r4, #3
 8002394:	4614      	mov	r4, r2
 8002396:	461d      	mov	r5, r3
 8002398:	4643      	mov	r3, r8
 800239a:	18e3      	adds	r3, r4, r3
 800239c:	603b      	str	r3, [r7, #0]
 800239e:	464b      	mov	r3, r9
 80023a0:	eb45 0303 	adc.w	r3, r5, r3
 80023a4:	607b      	str	r3, [r7, #4]
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	f04f 0300 	mov.w	r3, #0
 80023ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023b2:	4629      	mov	r1, r5
 80023b4:	028b      	lsls	r3, r1, #10
 80023b6:	4621      	mov	r1, r4
 80023b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023bc:	4621      	mov	r1, r4
 80023be:	028a      	lsls	r2, r1, #10
 80023c0:	4610      	mov	r0, r2
 80023c2:	4619      	mov	r1, r3
 80023c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023c6:	2200      	movs	r2, #0
 80023c8:	61bb      	str	r3, [r7, #24]
 80023ca:	61fa      	str	r2, [r7, #28]
 80023cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023d0:	f7fd fefa 	bl	80001c8 <__aeabi_uldivmod>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4613      	mov	r3, r2
 80023da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <HAL_RCC_GetSysClockFreq+0x200>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	0c1b      	lsrs	r3, r3, #16
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	3301      	adds	r3, #1
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80023ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023f6:	e002      	b.n	80023fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <HAL_RCC_GetSysClockFreq+0x204>)
 80023fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002400:	4618      	mov	r0, r3
 8002402:	3750      	adds	r7, #80	; 0x50
 8002404:	46bd      	mov	sp, r7
 8002406:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800
 8002410:	00f42400 	.word	0x00f42400
 8002414:	007a1200 	.word	0x007a1200

08002418 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e07b      	b.n	8002522 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	2b00      	cmp	r3, #0
 8002430:	d108      	bne.n	8002444 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800243a:	d009      	beq.n	8002450 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	61da      	str	r2, [r3, #28]
 8002442:	e005      	b.n	8002450 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d106      	bne.n	8002470 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7fe ff0a 	bl	8001284 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2202      	movs	r2, #2
 8002474:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002486:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	431a      	orrs	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c0:	431a      	orrs	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d4:	ea42 0103 	orr.w	r1, r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	0c1b      	lsrs	r3, r3, #16
 80024ee:	f003 0104 	and.w	r1, r3, #4
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	f003 0210 	and.w	r2, r3, #16
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	69da      	ldr	r2, [r3, #28]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002510:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b088      	sub	sp, #32
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	603b      	str	r3, [r7, #0]
 8002536:	4613      	mov	r3, r2
 8002538:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800253a:	2300      	movs	r3, #0
 800253c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002544:	2b01      	cmp	r3, #1
 8002546:	d101      	bne.n	800254c <HAL_SPI_Transmit+0x22>
 8002548:	2302      	movs	r3, #2
 800254a:	e126      	b.n	800279a <HAL_SPI_Transmit+0x270>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002554:	f7ff f810 	bl	8001578 <HAL_GetTick>
 8002558:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800255a:	88fb      	ldrh	r3, [r7, #6]
 800255c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b01      	cmp	r3, #1
 8002568:	d002      	beq.n	8002570 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800256a:	2302      	movs	r3, #2
 800256c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800256e:	e10b      	b.n	8002788 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d002      	beq.n	800257c <HAL_SPI_Transmit+0x52>
 8002576:	88fb      	ldrh	r3, [r7, #6]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d102      	bne.n	8002582 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002580:	e102      	b.n	8002788 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2203      	movs	r2, #3
 8002586:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	88fa      	ldrh	r2, [r7, #6]
 800259a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	88fa      	ldrh	r2, [r7, #6]
 80025a0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025c8:	d10f      	bne.n	80025ea <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f4:	2b40      	cmp	r3, #64	; 0x40
 80025f6:	d007      	beq.n	8002608 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002606:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002610:	d14b      	bne.n	80026aa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d002      	beq.n	8002620 <HAL_SPI_Transmit+0xf6>
 800261a:	8afb      	ldrh	r3, [r7, #22]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d13e      	bne.n	800269e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002624:	881a      	ldrh	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	1c9a      	adds	r2, r3, #2
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800263a:	b29b      	uxth	r3, r3
 800263c:	3b01      	subs	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002644:	e02b      	b.n	800269e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b02      	cmp	r3, #2
 8002652:	d112      	bne.n	800267a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002658:	881a      	ldrh	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002664:	1c9a      	adds	r2, r3, #2
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800266e:	b29b      	uxth	r3, r3
 8002670:	3b01      	subs	r3, #1
 8002672:	b29a      	uxth	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	86da      	strh	r2, [r3, #54]	; 0x36
 8002678:	e011      	b.n	800269e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800267a:	f7fe ff7d 	bl	8001578 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d803      	bhi.n	8002692 <HAL_SPI_Transmit+0x168>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002690:	d102      	bne.n	8002698 <HAL_SPI_Transmit+0x16e>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d102      	bne.n	800269e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800269c:	e074      	b.n	8002788 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1ce      	bne.n	8002646 <HAL_SPI_Transmit+0x11c>
 80026a8:	e04c      	b.n	8002744 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <HAL_SPI_Transmit+0x18e>
 80026b2:	8afb      	ldrh	r3, [r7, #22]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d140      	bne.n	800273a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	330c      	adds	r3, #12
 80026c2:	7812      	ldrb	r2, [r2, #0]
 80026c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	3b01      	subs	r3, #1
 80026d8:	b29a      	uxth	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80026de:	e02c      	b.n	800273a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d113      	bne.n	8002716 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	330c      	adds	r3, #12
 80026f8:	7812      	ldrb	r2, [r2, #0]
 80026fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002700:	1c5a      	adds	r2, r3, #1
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800270a:	b29b      	uxth	r3, r3
 800270c:	3b01      	subs	r3, #1
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	86da      	strh	r2, [r3, #54]	; 0x36
 8002714:	e011      	b.n	800273a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002716:	f7fe ff2f 	bl	8001578 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d803      	bhi.n	800272e <HAL_SPI_Transmit+0x204>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272c:	d102      	bne.n	8002734 <HAL_SPI_Transmit+0x20a>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d102      	bne.n	800273a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002738:	e026      	b.n	8002788 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800273e:	b29b      	uxth	r3, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1cd      	bne.n	80026e0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	6839      	ldr	r1, [r7, #0]
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 f8b3 	bl	80028b4 <SPI_EndRxTxTransaction>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d002      	beq.n	800275a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2220      	movs	r2, #32
 8002758:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10a      	bne.n	8002778 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002762:	2300      	movs	r3, #0
 8002764:	613b      	str	r3, [r7, #16]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277c:	2b00      	cmp	r3, #0
 800277e:	d002      	beq.n	8002786 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	77fb      	strb	r3, [r7, #31]
 8002784:	e000      	b.n	8002788 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002786:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002798:	7ffb      	ldrb	r3, [r7, #31]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3720      	adds	r7, #32
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	603b      	str	r3, [r7, #0]
 80027b0:	4613      	mov	r3, r2
 80027b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80027b4:	f7fe fee0 	bl	8001578 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027bc:	1a9b      	subs	r3, r3, r2
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	4413      	add	r3, r2
 80027c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80027c4:	f7fe fed8 	bl	8001578 <HAL_GetTick>
 80027c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80027ca:	4b39      	ldr	r3, [pc, #228]	; (80028b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	015b      	lsls	r3, r3, #5
 80027d0:	0d1b      	lsrs	r3, r3, #20
 80027d2:	69fa      	ldr	r2, [r7, #28]
 80027d4:	fb02 f303 	mul.w	r3, r2, r3
 80027d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027da:	e054      	b.n	8002886 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e2:	d050      	beq.n	8002886 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80027e4:	f7fe fec8 	bl	8001578 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	69fa      	ldr	r2, [r7, #28]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d902      	bls.n	80027fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d13d      	bne.n	8002876 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002808:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002812:	d111      	bne.n	8002838 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800281c:	d004      	beq.n	8002828 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002826:	d107      	bne.n	8002838 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002836:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002840:	d10f      	bne.n	8002862 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002860:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e017      	b.n	80028a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	3b01      	subs	r3, #1
 8002884:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	4013      	ands	r3, r2
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	429a      	cmp	r2, r3
 8002894:	bf0c      	ite	eq
 8002896:	2301      	moveq	r3, #1
 8002898:	2300      	movne	r3, #0
 800289a:	b2db      	uxtb	r3, r3
 800289c:	461a      	mov	r2, r3
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d19b      	bne.n	80027dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3720      	adds	r7, #32
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000008 	.word	0x20000008

080028b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af02      	add	r7, sp, #8
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80028c0:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <SPI_EndRxTxTransaction+0x7c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a1b      	ldr	r2, [pc, #108]	; (8002934 <SPI_EndRxTxTransaction+0x80>)
 80028c6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ca:	0d5b      	lsrs	r3, r3, #21
 80028cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028d0:	fb02 f303 	mul.w	r3, r2, r3
 80028d4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028de:	d112      	bne.n	8002906 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	2200      	movs	r2, #0
 80028e8:	2180      	movs	r1, #128	; 0x80
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f7ff ff5a 	bl	80027a4 <SPI_WaitFlagStateUntilTimeout>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d016      	beq.n	8002924 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fa:	f043 0220 	orr.w	r2, r3, #32
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e00f      	b.n	8002926 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00a      	beq.n	8002922 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	3b01      	subs	r3, #1
 8002910:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291c:	2b80      	cmp	r3, #128	; 0x80
 800291e:	d0f2      	beq.n	8002906 <SPI_EndRxTxTransaction+0x52>
 8002920:	e000      	b.n	8002924 <SPI_EndRxTxTransaction+0x70>
        break;
 8002922:	bf00      	nop
  }

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20000008 	.word	0x20000008
 8002934:	165e9f81 	.word	0x165e9f81

08002938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e041      	b.n	80029ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d106      	bne.n	8002964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7fe fcd8 	bl	8001314 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2202      	movs	r2, #2
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3304      	adds	r3, #4
 8002974:	4619      	mov	r1, r3
 8002976:	4610      	mov	r0, r2
 8002978:	f000 fa24 	bl	8002dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b082      	sub	sp, #8
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d122      	bne.n	8002a32 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d11b      	bne.n	8002a32 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f06f 0202 	mvn.w	r2, #2
 8002a02:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 f9b5 	bl	8002d88 <HAL_TIM_IC_CaptureCallback>
 8002a1e:	e005      	b.n	8002a2c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 f9a7 	bl	8002d74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f9b8 	bl	8002d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	d122      	bne.n	8002a86 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d11b      	bne.n	8002a86 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f06f 0204 	mvn.w	r2, #4
 8002a56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 f98b 	bl	8002d88 <HAL_TIM_IC_CaptureCallback>
 8002a72:	e005      	b.n	8002a80 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f97d 	bl	8002d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f98e 	bl	8002d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	d122      	bne.n	8002ada <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d11b      	bne.n	8002ada <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f06f 0208 	mvn.w	r2, #8
 8002aaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2204      	movs	r2, #4
 8002ab0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	f003 0303 	and.w	r3, r3, #3
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 f961 	bl	8002d88 <HAL_TIM_IC_CaptureCallback>
 8002ac6:	e005      	b.n	8002ad4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f953 	bl	8002d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f964 	bl	8002d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	f003 0310 	and.w	r3, r3, #16
 8002ae4:	2b10      	cmp	r3, #16
 8002ae6:	d122      	bne.n	8002b2e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f003 0310 	and.w	r3, r3, #16
 8002af2:	2b10      	cmp	r3, #16
 8002af4:	d11b      	bne.n	8002b2e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f06f 0210 	mvn.w	r2, #16
 8002afe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2208      	movs	r2, #8
 8002b04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f937 	bl	8002d88 <HAL_TIM_IC_CaptureCallback>
 8002b1a:	e005      	b.n	8002b28 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f929 	bl	8002d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f93a 	bl	8002d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d10e      	bne.n	8002b5a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d107      	bne.n	8002b5a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f06f 0201 	mvn.w	r2, #1
 8002b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7fe fb5d 	bl	8001214 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b64:	2b80      	cmp	r3, #128	; 0x80
 8002b66:	d10e      	bne.n	8002b86 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b72:	2b80      	cmp	r3, #128	; 0x80
 8002b74:	d107      	bne.n	8002b86 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 fadf 	bl	8003144 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b90:	2b40      	cmp	r3, #64	; 0x40
 8002b92:	d10e      	bne.n	8002bb2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9e:	2b40      	cmp	r3, #64	; 0x40
 8002ba0:	d107      	bne.n	8002bb2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f8ff 	bl	8002db0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	f003 0320 	and.w	r3, r3, #32
 8002bbc:	2b20      	cmp	r3, #32
 8002bbe:	d10e      	bne.n	8002bde <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	f003 0320 	and.w	r3, r3, #32
 8002bca:	2b20      	cmp	r3, #32
 8002bcc:	d107      	bne.n	8002bde <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f06f 0220 	mvn.w	r2, #32
 8002bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 faa9 	bl	8003130 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b084      	sub	sp, #16
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d101      	bne.n	8002c02 <HAL_TIM_ConfigClockSource+0x1c>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	e0b4      	b.n	8002d6c <HAL_TIM_ConfigClockSource+0x186>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c20:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c28:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c3a:	d03e      	beq.n	8002cba <HAL_TIM_ConfigClockSource+0xd4>
 8002c3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c40:	f200 8087 	bhi.w	8002d52 <HAL_TIM_ConfigClockSource+0x16c>
 8002c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c48:	f000 8086 	beq.w	8002d58 <HAL_TIM_ConfigClockSource+0x172>
 8002c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c50:	d87f      	bhi.n	8002d52 <HAL_TIM_ConfigClockSource+0x16c>
 8002c52:	2b70      	cmp	r3, #112	; 0x70
 8002c54:	d01a      	beq.n	8002c8c <HAL_TIM_ConfigClockSource+0xa6>
 8002c56:	2b70      	cmp	r3, #112	; 0x70
 8002c58:	d87b      	bhi.n	8002d52 <HAL_TIM_ConfigClockSource+0x16c>
 8002c5a:	2b60      	cmp	r3, #96	; 0x60
 8002c5c:	d050      	beq.n	8002d00 <HAL_TIM_ConfigClockSource+0x11a>
 8002c5e:	2b60      	cmp	r3, #96	; 0x60
 8002c60:	d877      	bhi.n	8002d52 <HAL_TIM_ConfigClockSource+0x16c>
 8002c62:	2b50      	cmp	r3, #80	; 0x50
 8002c64:	d03c      	beq.n	8002ce0 <HAL_TIM_ConfigClockSource+0xfa>
 8002c66:	2b50      	cmp	r3, #80	; 0x50
 8002c68:	d873      	bhi.n	8002d52 <HAL_TIM_ConfigClockSource+0x16c>
 8002c6a:	2b40      	cmp	r3, #64	; 0x40
 8002c6c:	d058      	beq.n	8002d20 <HAL_TIM_ConfigClockSource+0x13a>
 8002c6e:	2b40      	cmp	r3, #64	; 0x40
 8002c70:	d86f      	bhi.n	8002d52 <HAL_TIM_ConfigClockSource+0x16c>
 8002c72:	2b30      	cmp	r3, #48	; 0x30
 8002c74:	d064      	beq.n	8002d40 <HAL_TIM_ConfigClockSource+0x15a>
 8002c76:	2b30      	cmp	r3, #48	; 0x30
 8002c78:	d86b      	bhi.n	8002d52 <HAL_TIM_ConfigClockSource+0x16c>
 8002c7a:	2b20      	cmp	r3, #32
 8002c7c:	d060      	beq.n	8002d40 <HAL_TIM_ConfigClockSource+0x15a>
 8002c7e:	2b20      	cmp	r3, #32
 8002c80:	d867      	bhi.n	8002d52 <HAL_TIM_ConfigClockSource+0x16c>
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d05c      	beq.n	8002d40 <HAL_TIM_ConfigClockSource+0x15a>
 8002c86:	2b10      	cmp	r3, #16
 8002c88:	d05a      	beq.n	8002d40 <HAL_TIM_ConfigClockSource+0x15a>
 8002c8a:	e062      	b.n	8002d52 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6818      	ldr	r0, [r3, #0]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	6899      	ldr	r1, [r3, #8]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f000 f9ac 	bl	8002ff8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	609a      	str	r2, [r3, #8]
      break;
 8002cb8:	e04f      	b.n	8002d5a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	6899      	ldr	r1, [r3, #8]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f000 f995 	bl	8002ff8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cdc:	609a      	str	r2, [r3, #8]
      break;
 8002cde:	e03c      	b.n	8002d5a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6818      	ldr	r0, [r3, #0]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	6859      	ldr	r1, [r3, #4]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	461a      	mov	r2, r3
 8002cee:	f000 f909 	bl	8002f04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2150      	movs	r1, #80	; 0x50
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 f962 	bl	8002fc2 <TIM_ITRx_SetConfig>
      break;
 8002cfe:	e02c      	b.n	8002d5a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6818      	ldr	r0, [r3, #0]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	6859      	ldr	r1, [r3, #4]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	f000 f928 	bl	8002f62 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2160      	movs	r1, #96	; 0x60
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 f952 	bl	8002fc2 <TIM_ITRx_SetConfig>
      break;
 8002d1e:	e01c      	b.n	8002d5a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6818      	ldr	r0, [r3, #0]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	6859      	ldr	r1, [r3, #4]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	f000 f8e9 	bl	8002f04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2140      	movs	r1, #64	; 0x40
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 f942 	bl	8002fc2 <TIM_ITRx_SetConfig>
      break;
 8002d3e:	e00c      	b.n	8002d5a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4610      	mov	r0, r2
 8002d4c:	f000 f939 	bl	8002fc2 <TIM_ITRx_SetConfig>
      break;
 8002d50:	e003      	b.n	8002d5a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	73fb      	strb	r3, [r7, #15]
      break;
 8002d56:	e000      	b.n	8002d5a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d58:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a40      	ldr	r2, [pc, #256]	; (8002ed8 <TIM_Base_SetConfig+0x114>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d013      	beq.n	8002e04 <TIM_Base_SetConfig+0x40>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de2:	d00f      	beq.n	8002e04 <TIM_Base_SetConfig+0x40>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a3d      	ldr	r2, [pc, #244]	; (8002edc <TIM_Base_SetConfig+0x118>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d00b      	beq.n	8002e04 <TIM_Base_SetConfig+0x40>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a3c      	ldr	r2, [pc, #240]	; (8002ee0 <TIM_Base_SetConfig+0x11c>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d007      	beq.n	8002e04 <TIM_Base_SetConfig+0x40>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a3b      	ldr	r2, [pc, #236]	; (8002ee4 <TIM_Base_SetConfig+0x120>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d003      	beq.n	8002e04 <TIM_Base_SetConfig+0x40>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a3a      	ldr	r2, [pc, #232]	; (8002ee8 <TIM_Base_SetConfig+0x124>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d108      	bne.n	8002e16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a2f      	ldr	r2, [pc, #188]	; (8002ed8 <TIM_Base_SetConfig+0x114>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d02b      	beq.n	8002e76 <TIM_Base_SetConfig+0xb2>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e24:	d027      	beq.n	8002e76 <TIM_Base_SetConfig+0xb2>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a2c      	ldr	r2, [pc, #176]	; (8002edc <TIM_Base_SetConfig+0x118>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d023      	beq.n	8002e76 <TIM_Base_SetConfig+0xb2>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a2b      	ldr	r2, [pc, #172]	; (8002ee0 <TIM_Base_SetConfig+0x11c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d01f      	beq.n	8002e76 <TIM_Base_SetConfig+0xb2>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a2a      	ldr	r2, [pc, #168]	; (8002ee4 <TIM_Base_SetConfig+0x120>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d01b      	beq.n	8002e76 <TIM_Base_SetConfig+0xb2>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a29      	ldr	r2, [pc, #164]	; (8002ee8 <TIM_Base_SetConfig+0x124>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d017      	beq.n	8002e76 <TIM_Base_SetConfig+0xb2>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a28      	ldr	r2, [pc, #160]	; (8002eec <TIM_Base_SetConfig+0x128>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d013      	beq.n	8002e76 <TIM_Base_SetConfig+0xb2>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a27      	ldr	r2, [pc, #156]	; (8002ef0 <TIM_Base_SetConfig+0x12c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d00f      	beq.n	8002e76 <TIM_Base_SetConfig+0xb2>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a26      	ldr	r2, [pc, #152]	; (8002ef4 <TIM_Base_SetConfig+0x130>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00b      	beq.n	8002e76 <TIM_Base_SetConfig+0xb2>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a25      	ldr	r2, [pc, #148]	; (8002ef8 <TIM_Base_SetConfig+0x134>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d007      	beq.n	8002e76 <TIM_Base_SetConfig+0xb2>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a24      	ldr	r2, [pc, #144]	; (8002efc <TIM_Base_SetConfig+0x138>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d003      	beq.n	8002e76 <TIM_Base_SetConfig+0xb2>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a23      	ldr	r2, [pc, #140]	; (8002f00 <TIM_Base_SetConfig+0x13c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d108      	bne.n	8002e88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a0a      	ldr	r2, [pc, #40]	; (8002ed8 <TIM_Base_SetConfig+0x114>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d003      	beq.n	8002ebc <TIM_Base_SetConfig+0xf8>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a0c      	ldr	r2, [pc, #48]	; (8002ee8 <TIM_Base_SetConfig+0x124>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d103      	bne.n	8002ec4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	691a      	ldr	r2, [r3, #16]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	615a      	str	r2, [r3, #20]
}
 8002eca:	bf00      	nop
 8002ecc:	3714      	adds	r7, #20
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	40010000 	.word	0x40010000
 8002edc:	40000400 	.word	0x40000400
 8002ee0:	40000800 	.word	0x40000800
 8002ee4:	40000c00 	.word	0x40000c00
 8002ee8:	40010400 	.word	0x40010400
 8002eec:	40014000 	.word	0x40014000
 8002ef0:	40014400 	.word	0x40014400
 8002ef4:	40014800 	.word	0x40014800
 8002ef8:	40001800 	.word	0x40001800
 8002efc:	40001c00 	.word	0x40001c00
 8002f00:	40002000 	.word	0x40002000

08002f04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b087      	sub	sp, #28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	f023 0201 	bic.w	r2, r3, #1
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f023 030a 	bic.w	r3, r3, #10
 8002f40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	621a      	str	r2, [r3, #32]
}
 8002f56:	bf00      	nop
 8002f58:	371c      	adds	r7, #28
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b087      	sub	sp, #28
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	60f8      	str	r0, [r7, #12]
 8002f6a:	60b9      	str	r1, [r7, #8]
 8002f6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	f023 0210 	bic.w	r2, r3, #16
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	031b      	lsls	r3, r3, #12
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	621a      	str	r2, [r3, #32]
}
 8002fb6:	bf00      	nop
 8002fb8:	371c      	adds	r7, #28
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b085      	sub	sp, #20
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
 8002fca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f043 0307 	orr.w	r3, r3, #7
 8002fe4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	609a      	str	r2, [r3, #8]
}
 8002fec:	bf00      	nop
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b087      	sub	sp, #28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
 8003004:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003012:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	431a      	orrs	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	4313      	orrs	r3, r2
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	4313      	orrs	r3, r2
 8003024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	609a      	str	r2, [r3, #8]
}
 800302c:	bf00      	nop
 800302e:	371c      	adds	r7, #28
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800304c:	2302      	movs	r3, #2
 800304e:	e05a      	b.n	8003106 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2202      	movs	r2, #2
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003076:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	4313      	orrs	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a21      	ldr	r2, [pc, #132]	; (8003114 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d022      	beq.n	80030da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800309c:	d01d      	beq.n	80030da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a1d      	ldr	r2, [pc, #116]	; (8003118 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d018      	beq.n	80030da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a1b      	ldr	r2, [pc, #108]	; (800311c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d013      	beq.n	80030da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a1a      	ldr	r2, [pc, #104]	; (8003120 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d00e      	beq.n	80030da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a18      	ldr	r2, [pc, #96]	; (8003124 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d009      	beq.n	80030da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a17      	ldr	r2, [pc, #92]	; (8003128 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d004      	beq.n	80030da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a15      	ldr	r2, [pc, #84]	; (800312c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d10c      	bne.n	80030f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40010000 	.word	0x40010000
 8003118:	40000400 	.word	0x40000400
 800311c:	40000800 	.word	0x40000800
 8003120:	40000c00 	.word	0x40000c00
 8003124:	40010400 	.word	0x40010400
 8003128:	40014000 	.word	0x40014000
 800312c:	40001800 	.word	0x40001800

08003130 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <malloc>:
 8003158:	4b02      	ldr	r3, [pc, #8]	; (8003164 <malloc+0xc>)
 800315a:	4601      	mov	r1, r0
 800315c:	6818      	ldr	r0, [r3, #0]
 800315e:	f000 b823 	b.w	80031a8 <_malloc_r>
 8003162:	bf00      	nop
 8003164:	20000060 	.word	0x20000060

08003168 <sbrk_aligned>:
 8003168:	b570      	push	{r4, r5, r6, lr}
 800316a:	4e0e      	ldr	r6, [pc, #56]	; (80031a4 <sbrk_aligned+0x3c>)
 800316c:	460c      	mov	r4, r1
 800316e:	6831      	ldr	r1, [r6, #0]
 8003170:	4605      	mov	r5, r0
 8003172:	b911      	cbnz	r1, 800317a <sbrk_aligned+0x12>
 8003174:	f000 f8ac 	bl	80032d0 <_sbrk_r>
 8003178:	6030      	str	r0, [r6, #0]
 800317a:	4621      	mov	r1, r4
 800317c:	4628      	mov	r0, r5
 800317e:	f000 f8a7 	bl	80032d0 <_sbrk_r>
 8003182:	1c43      	adds	r3, r0, #1
 8003184:	d00a      	beq.n	800319c <sbrk_aligned+0x34>
 8003186:	1cc4      	adds	r4, r0, #3
 8003188:	f024 0403 	bic.w	r4, r4, #3
 800318c:	42a0      	cmp	r0, r4
 800318e:	d007      	beq.n	80031a0 <sbrk_aligned+0x38>
 8003190:	1a21      	subs	r1, r4, r0
 8003192:	4628      	mov	r0, r5
 8003194:	f000 f89c 	bl	80032d0 <_sbrk_r>
 8003198:	3001      	adds	r0, #1
 800319a:	d101      	bne.n	80031a0 <sbrk_aligned+0x38>
 800319c:	f04f 34ff 	mov.w	r4, #4294967295
 80031a0:	4620      	mov	r0, r4
 80031a2:	bd70      	pop	{r4, r5, r6, pc}
 80031a4:	20000144 	.word	0x20000144

080031a8 <_malloc_r>:
 80031a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031ac:	1ccd      	adds	r5, r1, #3
 80031ae:	f025 0503 	bic.w	r5, r5, #3
 80031b2:	3508      	adds	r5, #8
 80031b4:	2d0c      	cmp	r5, #12
 80031b6:	bf38      	it	cc
 80031b8:	250c      	movcc	r5, #12
 80031ba:	2d00      	cmp	r5, #0
 80031bc:	4607      	mov	r7, r0
 80031be:	db01      	blt.n	80031c4 <_malloc_r+0x1c>
 80031c0:	42a9      	cmp	r1, r5
 80031c2:	d905      	bls.n	80031d0 <_malloc_r+0x28>
 80031c4:	230c      	movs	r3, #12
 80031c6:	603b      	str	r3, [r7, #0]
 80031c8:	2600      	movs	r6, #0
 80031ca:	4630      	mov	r0, r6
 80031cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80032a4 <_malloc_r+0xfc>
 80031d4:	f000 f868 	bl	80032a8 <__malloc_lock>
 80031d8:	f8d8 3000 	ldr.w	r3, [r8]
 80031dc:	461c      	mov	r4, r3
 80031de:	bb5c      	cbnz	r4, 8003238 <_malloc_r+0x90>
 80031e0:	4629      	mov	r1, r5
 80031e2:	4638      	mov	r0, r7
 80031e4:	f7ff ffc0 	bl	8003168 <sbrk_aligned>
 80031e8:	1c43      	adds	r3, r0, #1
 80031ea:	4604      	mov	r4, r0
 80031ec:	d155      	bne.n	800329a <_malloc_r+0xf2>
 80031ee:	f8d8 4000 	ldr.w	r4, [r8]
 80031f2:	4626      	mov	r6, r4
 80031f4:	2e00      	cmp	r6, #0
 80031f6:	d145      	bne.n	8003284 <_malloc_r+0xdc>
 80031f8:	2c00      	cmp	r4, #0
 80031fa:	d048      	beq.n	800328e <_malloc_r+0xe6>
 80031fc:	6823      	ldr	r3, [r4, #0]
 80031fe:	4631      	mov	r1, r6
 8003200:	4638      	mov	r0, r7
 8003202:	eb04 0903 	add.w	r9, r4, r3
 8003206:	f000 f863 	bl	80032d0 <_sbrk_r>
 800320a:	4581      	cmp	r9, r0
 800320c:	d13f      	bne.n	800328e <_malloc_r+0xe6>
 800320e:	6821      	ldr	r1, [r4, #0]
 8003210:	1a6d      	subs	r5, r5, r1
 8003212:	4629      	mov	r1, r5
 8003214:	4638      	mov	r0, r7
 8003216:	f7ff ffa7 	bl	8003168 <sbrk_aligned>
 800321a:	3001      	adds	r0, #1
 800321c:	d037      	beq.n	800328e <_malloc_r+0xe6>
 800321e:	6823      	ldr	r3, [r4, #0]
 8003220:	442b      	add	r3, r5
 8003222:	6023      	str	r3, [r4, #0]
 8003224:	f8d8 3000 	ldr.w	r3, [r8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d038      	beq.n	800329e <_malloc_r+0xf6>
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	42a2      	cmp	r2, r4
 8003230:	d12b      	bne.n	800328a <_malloc_r+0xe2>
 8003232:	2200      	movs	r2, #0
 8003234:	605a      	str	r2, [r3, #4]
 8003236:	e00f      	b.n	8003258 <_malloc_r+0xb0>
 8003238:	6822      	ldr	r2, [r4, #0]
 800323a:	1b52      	subs	r2, r2, r5
 800323c:	d41f      	bmi.n	800327e <_malloc_r+0xd6>
 800323e:	2a0b      	cmp	r2, #11
 8003240:	d917      	bls.n	8003272 <_malloc_r+0xca>
 8003242:	1961      	adds	r1, r4, r5
 8003244:	42a3      	cmp	r3, r4
 8003246:	6025      	str	r5, [r4, #0]
 8003248:	bf18      	it	ne
 800324a:	6059      	strne	r1, [r3, #4]
 800324c:	6863      	ldr	r3, [r4, #4]
 800324e:	bf08      	it	eq
 8003250:	f8c8 1000 	streq.w	r1, [r8]
 8003254:	5162      	str	r2, [r4, r5]
 8003256:	604b      	str	r3, [r1, #4]
 8003258:	4638      	mov	r0, r7
 800325a:	f104 060b 	add.w	r6, r4, #11
 800325e:	f000 f829 	bl	80032b4 <__malloc_unlock>
 8003262:	f026 0607 	bic.w	r6, r6, #7
 8003266:	1d23      	adds	r3, r4, #4
 8003268:	1af2      	subs	r2, r6, r3
 800326a:	d0ae      	beq.n	80031ca <_malloc_r+0x22>
 800326c:	1b9b      	subs	r3, r3, r6
 800326e:	50a3      	str	r3, [r4, r2]
 8003270:	e7ab      	b.n	80031ca <_malloc_r+0x22>
 8003272:	42a3      	cmp	r3, r4
 8003274:	6862      	ldr	r2, [r4, #4]
 8003276:	d1dd      	bne.n	8003234 <_malloc_r+0x8c>
 8003278:	f8c8 2000 	str.w	r2, [r8]
 800327c:	e7ec      	b.n	8003258 <_malloc_r+0xb0>
 800327e:	4623      	mov	r3, r4
 8003280:	6864      	ldr	r4, [r4, #4]
 8003282:	e7ac      	b.n	80031de <_malloc_r+0x36>
 8003284:	4634      	mov	r4, r6
 8003286:	6876      	ldr	r6, [r6, #4]
 8003288:	e7b4      	b.n	80031f4 <_malloc_r+0x4c>
 800328a:	4613      	mov	r3, r2
 800328c:	e7cc      	b.n	8003228 <_malloc_r+0x80>
 800328e:	230c      	movs	r3, #12
 8003290:	603b      	str	r3, [r7, #0]
 8003292:	4638      	mov	r0, r7
 8003294:	f000 f80e 	bl	80032b4 <__malloc_unlock>
 8003298:	e797      	b.n	80031ca <_malloc_r+0x22>
 800329a:	6025      	str	r5, [r4, #0]
 800329c:	e7dc      	b.n	8003258 <_malloc_r+0xb0>
 800329e:	605b      	str	r3, [r3, #4]
 80032a0:	deff      	udf	#255	; 0xff
 80032a2:	bf00      	nop
 80032a4:	20000140 	.word	0x20000140

080032a8 <__malloc_lock>:
 80032a8:	4801      	ldr	r0, [pc, #4]	; (80032b0 <__malloc_lock+0x8>)
 80032aa:	f000 b84b 	b.w	8003344 <__retarget_lock_acquire_recursive>
 80032ae:	bf00      	nop
 80032b0:	20000284 	.word	0x20000284

080032b4 <__malloc_unlock>:
 80032b4:	4801      	ldr	r0, [pc, #4]	; (80032bc <__malloc_unlock+0x8>)
 80032b6:	f000 b846 	b.w	8003346 <__retarget_lock_release_recursive>
 80032ba:	bf00      	nop
 80032bc:	20000284 	.word	0x20000284

080032c0 <memset>:
 80032c0:	4402      	add	r2, r0
 80032c2:	4603      	mov	r3, r0
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d100      	bne.n	80032ca <memset+0xa>
 80032c8:	4770      	bx	lr
 80032ca:	f803 1b01 	strb.w	r1, [r3], #1
 80032ce:	e7f9      	b.n	80032c4 <memset+0x4>

080032d0 <_sbrk_r>:
 80032d0:	b538      	push	{r3, r4, r5, lr}
 80032d2:	4d06      	ldr	r5, [pc, #24]	; (80032ec <_sbrk_r+0x1c>)
 80032d4:	2300      	movs	r3, #0
 80032d6:	4604      	mov	r4, r0
 80032d8:	4608      	mov	r0, r1
 80032da:	602b      	str	r3, [r5, #0]
 80032dc:	f7fe f874 	bl	80013c8 <_sbrk>
 80032e0:	1c43      	adds	r3, r0, #1
 80032e2:	d102      	bne.n	80032ea <_sbrk_r+0x1a>
 80032e4:	682b      	ldr	r3, [r5, #0]
 80032e6:	b103      	cbz	r3, 80032ea <_sbrk_r+0x1a>
 80032e8:	6023      	str	r3, [r4, #0]
 80032ea:	bd38      	pop	{r3, r4, r5, pc}
 80032ec:	20000280 	.word	0x20000280

080032f0 <__errno>:
 80032f0:	4b01      	ldr	r3, [pc, #4]	; (80032f8 <__errno+0x8>)
 80032f2:	6818      	ldr	r0, [r3, #0]
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	20000060 	.word	0x20000060

080032fc <__libc_init_array>:
 80032fc:	b570      	push	{r4, r5, r6, lr}
 80032fe:	4d0d      	ldr	r5, [pc, #52]	; (8003334 <__libc_init_array+0x38>)
 8003300:	4c0d      	ldr	r4, [pc, #52]	; (8003338 <__libc_init_array+0x3c>)
 8003302:	1b64      	subs	r4, r4, r5
 8003304:	10a4      	asrs	r4, r4, #2
 8003306:	2600      	movs	r6, #0
 8003308:	42a6      	cmp	r6, r4
 800330a:	d109      	bne.n	8003320 <__libc_init_array+0x24>
 800330c:	4d0b      	ldr	r5, [pc, #44]	; (800333c <__libc_init_array+0x40>)
 800330e:	4c0c      	ldr	r4, [pc, #48]	; (8003340 <__libc_init_array+0x44>)
 8003310:	f000 f81a 	bl	8003348 <_init>
 8003314:	1b64      	subs	r4, r4, r5
 8003316:	10a4      	asrs	r4, r4, #2
 8003318:	2600      	movs	r6, #0
 800331a:	42a6      	cmp	r6, r4
 800331c:	d105      	bne.n	800332a <__libc_init_array+0x2e>
 800331e:	bd70      	pop	{r4, r5, r6, pc}
 8003320:	f855 3b04 	ldr.w	r3, [r5], #4
 8003324:	4798      	blx	r3
 8003326:	3601      	adds	r6, #1
 8003328:	e7ee      	b.n	8003308 <__libc_init_array+0xc>
 800332a:	f855 3b04 	ldr.w	r3, [r5], #4
 800332e:	4798      	blx	r3
 8003330:	3601      	adds	r6, #1
 8003332:	e7f2      	b.n	800331a <__libc_init_array+0x1e>
 8003334:	080039ec 	.word	0x080039ec
 8003338:	080039ec 	.word	0x080039ec
 800333c:	080039ec 	.word	0x080039ec
 8003340:	080039f0 	.word	0x080039f0

08003344 <__retarget_lock_acquire_recursive>:
 8003344:	4770      	bx	lr

08003346 <__retarget_lock_release_recursive>:
 8003346:	4770      	bx	lr

08003348 <_init>:
 8003348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334a:	bf00      	nop
 800334c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800334e:	bc08      	pop	{r3}
 8003350:	469e      	mov	lr, r3
 8003352:	4770      	bx	lr

08003354 <_fini>:
 8003354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003356:	bf00      	nop
 8003358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800335a:	bc08      	pop	{r3}
 800335c:	469e      	mov	lr, r3
 800335e:	4770      	bx	lr
